<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Category: osx &#8211; Just another tech blog</title>

<meta name="keywords" content="">



<!-- Twitter Cards -->
<meta name="twitter:title" content="Category: osx">

<meta name="twitter:site" content="@clburlison">
<meta name="twitter:creator" content="@clburlison">

<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="http://localhost:4000/images/">

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Category: osx">

<meta property="og:url" content="http://localhost:4000/blog/categories/osx/atom.xml">
<meta property="og:site_name" content="Just another tech blog">





<link rel="canonical" href="http://localhost:4000/blog/categories/osx/atom.xml">
<link href="http://localhost:4000/feed.xml" type="application/atom+xml" rel="alternate" title="Just another tech blog Feed">


<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="http://localhost:4000/assets/css/main.css">

<meta http-equiv="cleartype" content="on">

<!-- HTML5 Shiv and Media Query Support -->
<!--[if lt IE 9]>
	<script src="http://localhost:4000/assets/js/vendor/html5shiv.min.js"></script>
	<script src="http://localhost:4000/assets/js/vendor/respond.min.js"></script>
<![endif]-->

<!-- Modernizr -->
<script src="http://localhost:4000/assets/js/vendor/modernizr-2.7.1.custom.min.js"></script>

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="http://localhost:4000/favicon.ico">
<!-- 32x32 -->
<link rel="shortcut icon" href="http://localhost:4000/favicon.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="http://localhost:4000/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="http://localhost:4000/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="http://localhost:4000/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://localhost:4000/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body class="page">

<!--[if lt IE 9]><div class="browser-upgrade alert alert-info">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</div><![endif]-->

<div class="navigation-wrapper">
	<div class="site-name">
		<a href="http://localhost:4000">Just another tech blog</a>
	</div><!-- /.site-name -->
	<div class="top-navigation">
		<nav role="navigation" id="site-nav" class="nav">
		    <ul>
		        
					    
					        
					    
					    <li><a href="http://localhost:4000/about/" >About</a></li>
					  
					    
					        
					    
					    <li><a href="http://localhost:4000/resources/" >Resources</a></li>
					  
					    
					        
					    
					    <li><a href="http://localhost:4000/blog/archives/" >Archives</a></li>
					  
		    </ul>
		</nav>
	</div><!-- /.top-navigation -->
</div><!-- /.navigation-wrapper -->



<div id="main" role="main">
  <div class="article-author-side">
    



	<img src="http://localhost:4000/images/me.jpg" class="bio-photo" alt="Clayton Burlison bio photo"></a>

<h3>Clayton Burlison</h3>
<p>A Mac sysadmin, documenting useful code, ideas, & guides.</p>
<a href="mailto:clburlison@gmail.com" class="author-social" target="_blank"><i class="fa fa-envelope-square"></i> Email</a>
<a href="http://twitter.com/clburlison" class="author-social" target="_blank"><i class="fa fa-twitter-square"></i> Twitter</a>
<a href="http://facebook.com/clburlison" class="author-social" target="_blank"><i class="fa fa-facebook-square"></i> Facebook</a>

<a href="http://linkedin.com/in/clburlison" class="author-social" target="_blank"><i class="fa fa-linkedin-square"></i> LinkedIn</a>


<a href="http://github.com/clburlison" class="author-social" target="_blank"><i class="fa fa-github"></i> Github</a>






  </div>
  <article>
    <h1>Category: osx</h1>
    <div class="article-wrap">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | Just another tech blog]]></title>
  <link href="http://localhost:4000/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2014-10-02T03:05:42-05:00</updated>
  <id>http://localhost:4000/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash if then cheat sheet]]></title>
    <link href="http://localhost:4000/blog/2014/07/28/bash-if-then-cheat-sheet/"/>
    <updated>2014-07-28T22:05:56-05:00</updated>
    <id>http://localhost:4000/blog/2014/07/28/bash-if-then-cheat-sheet</id>
    <content type="html"><![CDATA[<p>I always find myself looking for a good resource when writing if/then statements in bash scripts. It’s hard to remember all the combinations when you simply do not use most of them frequently. Below is my personal cheat sheet…copied here because I was tired of having to look for a good resource.   </p>

<p>Examples on usage can be found in the <a href="http://tldp.org/LDP/abs/html/comparison-ops.html">original article</a>.</p>

<h2 id="integer-comparison">integer comparison</h2>
<p>{% highlight bash %}</p>

<pre><code># The following are for number values only.
-eq
	is equal to
	if [ "$a" -eq "$b" ]
-ne
	is not equal to
	if [ "$a" -ne "$b" ]

-gt
	is greater than
	if [ "$a" -gt "$b" ]

-ge
	is greater than or equal to
	if [ "$a" -ge "$b" ]

-lt
	is less than
	if [ "$a" -lt "$b" ]

-le
	is less than or equal to
	if [ "$a" -le "$b" ]

&lt;
	is less than (within double parentheses)
	(("$a" &lt; "$b"))

&lt;=
	is less than or equal to (within double parentheses)
	(("$a" &lt;= "$b"))

&gt;
	is greater than (within double parentheses)
	(("$a" &gt; "$b"))

&gt;=
	is greater than or equal to (within double parentheses)
	(("$a" &gt;= "$b")) {% endhighlight %}
</code></pre>

<h2 id="string-comparison">string comparison</h2>
<p>{% highlight bash %}</p>

<pre><code># The following are for strings of data.
=
	is equal to
	if [ "$a" = "$b" ]

Caution:	
	Note the whitespace framing the =
	if [ "$a"="$b" ] is not equivalent to the above.

==
	is equal to
	if [ "$a" == "$b" ]

This is a synonym for =
Note:	
	The == comparison operator behaves differently 
	within a double-brackets test than within single brackets.
	[[ $a == z* ]]   # True if $a starts with an "z" (pattern matching).
	[[ $a == "z*" ]] # True if $a is equal to z* (literal matching).
	[ $a == z* ]     # File globbing and word splitting take place.
	[ "$a" == "z*" ] # True if $a is equal to z* (literal matching).
	# Thanks, Stéphane Chazelas

!=
	is not equal to
	if [ "$a" != "$b" ]

This operator uses pattern matching within a [[ ... ]] construct.

&lt;
	is less than, in ASCII alphabetical order
	if [[ "$a" &lt; "$b" ]]
	if [ "$a" \&lt; "$b" ]

Note: that the "&lt;" needs to be escaped within a [ ] construct.

&gt;
	is greater than, in ASCII alphabetical order
	if [[ "$a" &gt; "$b" ]]
	if [ "$a" \&gt; "$b" ]

Note that the "&gt;" needs to be escaped within a [ ] construct.

-z
	string is null, that is, has zero length

String=''   # Zero-length ("null") string variable.
	if [ -z "$String" ]
	then
	  echo "\$String is null."
	else
	  echo "\$String is NOT null."
	fi     # $String is null.

-n
	string is not null.

Caution:
	The -n test requires that the string be quoted within the test brackets. 
	Using an unquoted string with ! -z, or even just the unquoted string a
	lone within test brackets (see Example 7-6) normally works, however, 
	this is an unsafe practice. Always quote a tested string. [1] {% endhighlight %}
</code></pre>

<p>Special Thanks to the The Linux Documentation Project for outlining the information in such a usable format. They also include great examples on their website.</p>

<hr />

<p>Articles: 
<a href="http://tldp.org/LDP/abs/html/comparison-ops.html">Advanced Bash-Scripting Guide</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show Help Desk Information]]></title>
    <link href="http://localhost:4000/blog/2014/07/14/show-helpdesk-info/"/>
    <updated>2014-07-14T17:47:53-05:00</updated>
    <id>http://localhost:4000/blog/2014/07/14/show-helpdesk-info</id>
    <content type="html"><![CDATA[<p>Display useful information on your Desktop using Geektool. Make troubleshooting network issues for your end users easier. Find your hostname faster. The amount of useful information is limitless. If you can script it…you can display it.  </p>

<p>{% img /images/posts/2014-07-14/current_info.png 400 100 My Results %}<br />
My Geektools Results </p>

<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#what-is-it">What is it?</a>    <ul>
      <li><a href="#the-script">The Script</a></li>
    </ul>
  </li>
  <li><a href="#created-by-erik-gomez">Created by Erik Gomez</a>    <ul>
      <li><a href="#script-variables">Script Variables</a></li>
      <li><a href="#display-computer-names">Display Computer Names</a></li>
      <li><a href="#display-user-name">Display User Name</a></li>
      <li><a href="#display-operating-system-and-sub-build">Display Operating System and Sub Build</a></li>
      <li><a href="#display-hardware-id">Display Hardware ID</a></li>
      <li><a href="#spacing-to-make-things-pretty">Spacing to make things pretty</a></li>
      <li><a href="#this-will-show-the-current-ip-addresses">This will show the Current IP addresses.</a></li>
      <li><a href="#display-current-wireless-ssid">Display current wireless SSID</a></li>
      <li><a href="#spacing-to-make-things-pretty-1">Spacing to make things pretty</a>        <ul>
          <li><a href="#technology-support">Technology Support</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#how-do-you-use-it">How do you use it?</a>    <ul>
      <li><a href="#modify-the-script">Modify the script</a></li>
      <li><a href="#creating-the-profiles">Creating the profiles</a>        <ul>
          <li><a href="#part-1---login-profile">Part 1 - Login profile</a></li>
          <li><a href="#part-2---organization-profile">Part 2 - Organization profile</a></li>
        </ul>
      </li>
      <li><a href="#deploying-your-profiles">Deploying your Profiles</a></li>
    </ul>
  </li>
  <li><a href="#ending-notes">Ending Notes</a>    <ul>
      <li><a href="#dependencies">Dependencies</a></li>
      <li><a href="#credits">Credits</a></li>
    </ul>
  </li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<hr />

<h1 id="introduction">Introduction</h1>
<p>Firstly, I take no credit for this valuable resource. All credit should go to Erik Gomez from the munki-dev <a href="https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY">mailing list</a>. All I have done is modified the script to work in my environment. Modifications included removing some excess <code>if</code>/ <code>then</code> statements, remove the MAC address, adding current SSID, and a few other tweaks so the script played nicely as a profile. The writing is on the wall, mcx is slowing dying or at least it is becoming a less preferred method of managing preferences.</p>

<p>{% img /images/posts/2014-07-14/eriks_info.png 400 100 Eriks Results %}<br />
Erik’s Original Desktop Results  </p>

<p><strong>Requirements</strong> <em>-You will want to download and save these somewhere.</em></p>

<ul>
  <li><a href="http://projects.tynsoe.org/en/geektool/download.php">Geektool</a></li>
  <li><a href="https://github.com/timsutton/mcxToProfile">mcxToProfile</a></li>
  <li><a href="https://github.com/timsutton/make-profile-pkg">make-profile-pkg</a></li>
  <li><a href="https://gist.github.com/clburlison/af2a1afe01fb9aff9288">Gist files for this project</a></li>
  <li><a href="{{ site.url }}/images/posts/2014-07-14/Geektool-login-item.mobileconfig">Geektool-login-item.mobileconfig</a></li>
</ul>

<h1 id="what-is-it">What is it?</h1>
<p>In short, this is simply a bash script that Geektool is running in the background. It defaults to refreshing every 30 seconds, though you can modify this in the <code>org.tynsoe.geeklet.shell.plist</code> file, which has negligible performance toll on Mac clients. You want the refresh rate low so when the network drops or you get a new IP address you can easily see changes.</p>

<h2 id="the-script">The Script</h2>
<p>{% highlight bash linenos %}
#!/bin/sh</p>

<h1 id="created-by-erik-gomez">Created by Erik Gomez</h1>
<p># Modified 30-10-2013
##### White Backgrounds will kill you!
# Modified by Clayton Burlison for use at Birdville ISD
# Date Modified June 25, 2014</p>

<h4 id="script-variables">Script Variables</h4>
<p>Computer_Name=<code>scutil --get ComputerName</code>
HostName=<code>scutil --get HostName</code>
LocalHostName=<code>scutil --get LocalHostName</code>
OS_Version=<code>sw_vers | grep "ProductVersion:" | awk '{print $2}'</code>
OS_Sub_Build=<code>sw_vers | grep "BuildVersion:" | awk '{print $2}'</code>
Hardware_ID=<code>sysctl hw.model | grep "hw.model:" | awk '{print $2}'</code>
IP_en0=<code>ifconfig en0 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
IP_en1=<code>ifconfig en1 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
IP_en2=<code>ifconfig en2 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
IP_en3=<code>ifconfig en3 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
IP_en4=<code>ifconfig en4 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
IP_en5=<code>ifconfig en5 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'</code>
SSID=<code>/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'</code></p>

<h4 id="display-computer-names">Display Computer Names</h4>
<p>echo “Computer Name: $Computer_Name”;
#echo “Host Name: $HostName”;
#echo “LocalHost Name: $LocalHostName”;</p>

<h4 id="display-user-name">Display User Name</h4>
<p>echo “Username: $USER”;</p>

<h4 id="display-operating-system-and-sub-build">Display Operating System and Sub Build</h4>
<p>echo “Operating System: $OS_Version”_“$OS_Sub_Build”;</p>

<h4 id="display-hardware-id">Display Hardware ID</h4>
<p>echo “Hardware ID: $Hardware_ID”;</p>

<h3 id="spacing-to-make-things-pretty">Spacing to make things pretty</h3>
<p>echo “”</p>

<h3 id="this-will-show-the-current-ip-addresses">This will show the Current IP addresses.</h3>
<p>### This should show all IP Addresses:
### Wi-FI, Ethernet 1 &amp; 2, and even Thunderbolt NICs
if [ “$IP_en0” = ‘’ ] &amp;&amp; [ “$IP_en1” = ‘’ ] &amp;&amp; [ “$IP_en2” = ‘’ ] &amp;&amp; [ “$IP_en3” = ‘’ ] &amp;&amp; [ “$IP_en4” = ‘’ ] &amp;&amp; [ “$IP_en5” = ‘’ ]
	then
		echo “IP Address: No connection found”
	else
		if [ “$IP_en0” != ‘’ ]
			then 
				echo “IP Address: $IP_en0”
 			else
 				echo “” &gt;/dev/null
 		fi
 		if [ “$IP_en1” != ‘’ ]
			then 
				echo “IP Address: $IP_en1”
 			else
 				echo “” &gt;/dev/null
 		fi
 		if [ “$IP_en2” != ‘’ ]
			then 
				echo “IP Address: $IP_en2”
 			else
 				echo “” &gt;/dev/null
 		fi
 		if [ “$IP_en3” != ‘’ ]
			then 
				echo “IP Address: $IP_en3”
 			else
 				echo “” &gt;/dev/null
 		fi
 		if [ “$IP_en4” != ‘’ ]
			then 
				echo “IP Address: $IP_en4”
 			else
 				echo “” &gt;/dev/null
 		fi
 		if [ “$IP_en5” != ‘’ ]
			then 
				echo “IP Address: $IP_en5”
 			else
 				echo “” &gt;/dev/null
 		fi
fi		</p>

<h3 id="display-current-wireless-ssid">Display current wireless SSID</h3>
<p>if [ “$SSID” = ‘’ ]
	then
		echo “Wireless SSID: Disconnected”
	else
		if [ “$SSID” = “           SSID: “ ]
			then
				echo “Wireless SSID: Disconnected”
			else
				echo “Wireless SSID: $SSID”
		fi	
fi</p>

<h3 id="spacing-to-make-things-pretty-1">Spacing to make things pretty</h3>
<p>echo “”</p>

<h4 id="technology-support">Technology Support</h4>
<p>echo “For Help Desk Support call: x3819”
{% endhighlight %}</p>

<h1 id="how-do-you-use-it">How do you use it?</h1>
<p>Great now what? Well that script does nothing for you. Unless you want to manually copy and paste on every computer…for every user profile…in your entire fleet. So lets automate that process a bit. If you have not done so already you will want to download all five (5) of the requirements above. This includes two command lines tools created by Tim Sutton, Geektool.app, the gist with all the necessary plist files, and a profile to launch Geektool at login.</p>

<h2 id="modify-the-script">Modify the script</h2>
<p><em>Note:</em> If you wish to use the script as is, feel free to skip below to creating the profiles.  </p>

<p>This will be the most time consuming process so start small. Lets start by changing the Help Desk Phone Number in my script. Open the main plist <code>org.tynsoe.geeklet.shell.plist</code> from the gist zip file. Scroll down to line 116 and change the following line to something useful.</p>

<p>{% highlight bash %}
#### Technology Support
echo “For Help Desk Support call: x3819”
{% endhighlight %}</p>

<p>Now is a good time to mention that the script inside of the plist has been modified from the original <code>geektool_script.sh</code> script. The plist file needs to have <code>&amp;</code> encoded as <code>&amp;amp;</code>. For that reason if you make to many changes to the script you will need to test for compatibility with GeekTool. Testing will be outside the scope of this post but a hint if you are running into errors: open Geektool manually and paste your script directly into the application.</p>

<h2 id="creating-the-profiles">Creating the profiles</h2>
<p>Note for this to work, I have found that having two profiles was the easiest solution but your milage may vary. The main reason for splitting the profiles into two, was to use one profile for launching Geektool at login and the second profile deals with organization settings for Geektool: refresh rate, script, color of the text, etc.</p>

<h3 id="part-1---login-profile">Part 1 - Login profile</h3>
<p>With that out of the way, I will go ahead and say I cheated and created the <code>Geektool-login-item.mobileconfig</code> with my profile server since it was easier than creating from scratch. You should have downloaded the referenced profile under the requirement section. You can modify this profile to have your organization name by opening the file in a <a href="http://www.barebones.com/products/textwrangler/">text editing</a> application (aka not TextEdit.app). Search for “Birdville ISD” and change to your organization name. Save and exit.</p>

<h3 id="part-2---organization-profile">Part 2 - Organization profile</h3>
<p>Now we are going to use Tim Sutton’s mcxToProfile. This tool will combine the three plist files below: </p>

<ul>
  <li><code>org.tynsoe.geeklet.shell.plist</code></li>
  <li><code>org.tynsoe.GeekTool.plist</code></li>
  <li><code>org.tynsoe.geektool3.plist</code> into a single usable profile. </li>
</ul>

<p>Put mcxToProfile.py in the same directory as your three plist files. After changing directory to the folder with your files run the following in Terminal:</p>

<p><strong>Creating your profile</strong>
{% highlight bash %}
mcxToProfile.py -r org.tynsoe.geeklet.shell.plist org.tynsoe.GeekTool.plist \
org.tynsoe.geektool3.plist –identifier BISD-GeekTool –manage Often
{% endhighlight %}</p>

<p><em>Note:</em> you will want to change your identifier to something useful for your organization. </p>

<p>This will create a second profile with the name of your “identifier + .mobileconfig”</p>

<h2 id="deploying-your-profiles">Deploying your Profiles</h2>
<p>This is kind of the bonus round. If you have made it this far you should have two working profiles (one was already made for you). If you have a MDM server you could simply upload the profiles to that, you could have users double click the files, etc. I however choose to install the profiles via a package for my users.</p>

<p>Luckily, Tim has made our life easy once again. This time we will use <code>make-profile-pkg</code> to create a package containing our profiles.  If you are using munki it is even easier, as this tool can even automatically import into your munki repository. </p>

<p>Making sure your .mobileconfig files and <code>make-profile-pkg.py</code> are in the same directory. Run the following to create your install package.</p>

<p>{% highlight bash %}
make_profile_pkg.py –munki-import Geektool-login-item.mobileconfig
{% endhighlight %}</p>

<p>In the following, you will need to modify the profile name with your correct file.</p>

<p>{% highlight bash %}
make_profile_pkg.py –munki-import identifier.mobileconfig
{% endhighlight %}</p>

<p><em>Note:</em> you will want to remove the <code>--munki-import</code> flag if you just want to create a package.</p>

<h1 id="ending-notes">Ending Notes</h1>
<p>Hopefully you find this as useful as I did. If you run into any issues feel free to contact me on Twitter or email.</p>

<h2 id="dependencies">Dependencies</h2>
<ul>
  <li>Geektool.app needs to be located in /Applications/.</li>
  <li>A logout/login is required after the profiles are installed for the information to be displayed.</li>
  <li>If one or both of your profiles are removed…bye bye Desktop Info.</li>
  <li>This script is only good for network interfaces up to 5. If you need more add them in the script.</li>
  <li>Tested with 10.7 Lion through 10.9 Mavericks with success. </li>
  <li>The text is white by default. If your desktop background is a bright color then you will want to change the text color using Geektool.</li>
</ul>

<h2 id="credits">Credits</h2>
<p>Again, a giant thank you to Erik Gomez for sharing with the munki community. Without his original documentation I would have never gotten this to work. Thanks to Tim Sutton for providing awesome tools.  </p>

<hr />

<p>Articles: <a href="https://groups.google.com/forum/?fromgroups#!topic/munki-dev/jxs3ljEFbJY">Using GeekTool to show HelpDesk Information</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bender]]></title>
    <link href="http://localhost:4000/blog/2014/07/11/bender/"/>
    <updated>2014-07-11T16:42:20-05:00</updated>
    <id>http://localhost:4000/blog/2014/07/11/bender</id>
    <content type="html"><![CDATA[<p>Many administrators use OS X Server. In my opinion the server OS has always lacked choices when it comes to backing up the server services data. Until I found Bender…</p>

<p>{% img /images/posts/2014-07-11/bendericon_display.png %}</p>

<blockquote>
  <p>Bender is a utility written by Forget Computers to automate the backup of OS X Server settings to provide easy restoration of services should they become corrupt, and for importing server settings after a migration or server upgrade.</p>

  <p>Bender Home Page</p>
</blockquote>

<p>Sure you have TimeMachine but some of the postgresql databases have been known to not backup property with TimeMachine. Honestly, I had given up on a backup solution that just gets the data I need for OS X Server. While reading though the <a href="https://groups.google.com/d/msg/macenterprise/MxLssCqR72Y/J1qFuALErMwJ">macenterprise list</a> I found someone recommended Bender. Once I got to work I realized what a gem I had been missing out on. In my testing I have only used Bender on Mavericks (10.9) but it should work on Lion and up. It will daily backup the following:</p>

<ul>
  <li>Open Directory</li>
  <li>Single XML plist of all the server settings (aka DHCP, DNS, NetBoot, FileShares, etc.)</li>
  <li>A series of individual XML plists of each server setting (aka all the above as individual files)</li>
  <li>Profile Manager and Wiki services</li>
</ul>

<p>The last one was the true winner for me. I had been researching what I needed to do to backup my wiki, as over the past few months it has become an invaluable documentation tool for me. After finding little to none in the way of Apple documentation/release notes I finally gave up. Although, Bender in combination with TimeMachine makes for a much more complete backup solution for OS X Server.</p>

<p>Hopefully you find it as invaluable as I did or at least a nice utility to have in your tool-belt. </p>

<hr />

<p>Articles: <a href="http://robotcloud.screenstepslive.com/s/2459/m/5322/l/94467-bender-automated-backup-of-os-x-server-settings">Bender Home Page</a>, <a href="https://groups.google.com/d/msg/macenterprise/MxLssCqR72Y/J1qFuALErMwJ">macenterprise list</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encrypted DMGs]]></title>
    <link href="http://localhost:4000/blog/2014/06/17/encrypted-dmgs/"/>
    <updated>2014-06-17T19:49:02-05:00</updated>
    <id>http://localhost:4000/blog/2014/06/17/encrypted-dmgs</id>
    <content type="html"><![CDATA[<p>We all know about file security but how many of our users take the time to properly protect their data? Sure you can make policy but unless someone documents the expectations, reasons, and how to do it, many users will simply ignore policy. How about personal files, we all store data on our computers that we know should be protect but how? Well luckily Apple has a very simple solution to the problem explained above.</p>

<h2 id="what-to-secure">What to secure</h2>
<p>First, you can secure whatever files your heart desires: bank statements, work files, secret plans for that special vacation with the family, photos, passwords, etc. Pretty much anything you want, though fair-warning this is not a backup solution and if you forget your encryption password it will make accessing those files quite difficult. </p>

<p>The reason to secure files is because you do not want others to have access to your data. This will help protect you in case your laptop gets stolen or maybe it just get physically accessed by someone you know. This method will use a 256-bit AES encryption algorithm to secure your data. That being said if you use a simple password, <em>cough</em> <code>password</code> <em>cough</em>, then it is quite simple for someone to brute force hack that password and have access to your data. </p>

<p><strong>Disclaimer</strong>: Nothing is 100% secure. This method is just another step that can help make it harder for someone to obtain your information. With enough time the right person could access these files but your average Joe is going to have a darn hard time.</p>

<h1 id="creating-an-encrypted-dmg">Creating an encrypted DMG</h1>
<p>Step 1 - Open Disk Utility<br />
{% img /images/posts/2014-06-17/step1.png 400 100 %}</p>

<p>Step 2 - Create a Blank Disk Image…<br />
{% img /images/posts/2014-06-17/step2.png 600 400 %}</p>

<p>Step 3 - Name your new dmg. Note the values shown are important.</p>

<ul>
  <li>Name: the mounted disk image name</li>
  <li>Size: depends on your data needs</li>
  <li>Format: the default <code>Mac OS Extended (Journaled)</code> should be fine for most needs</li>
  <li>Encryption: use 256-bit AES unless you have a solid reason to not</li>
  <li>Partitions: using <code>Single partition - GUID Partition Map</code> is a standard that is compatible with most Macs</li>
  <li>Image Format: using <code>sparse disk image</code> will save space on your hard drive and only use the disk space needed by the dmg</li>
</ul>

<p>{% img /images/posts/2014-06-17/step3.png 600 400 %}</p>

<p>Step 4 - Here you want to type a secure password<br />
{% img /images/posts/2014-06-17/step4.png 400 400 %}</p>

<p>Step 5 - If you click the key icon OS X will help you create a secure password using the Password Assistant<br />
{% img /images/posts/2014-06-17/step5.png 600 400 %}</p>

<p>Step 6 - Note the file names. This is your encrypted dmg. You can store files here just like a flash drive.<br />
{% img /images/posts/2014-06-17/step6.png 600 400 %}</p>

<p>Step 7 - If you eject your dmg you will be presented with this pop-up the next time you try to open the dmg. Type your encryption password to unlock the dmg.<br />
{% img /images/posts/2014-06-17/step7.png 400 100 %}</p>

<h2 id="video-showing-the-process">Video showing the process</h2>
<p>{% youtube zAc9H7AQ2TQ %}</p>

<h1 id="conclusion">Conclusion</h1>
<p>Creating an encrypted dmg is quite easy once you know the steps. My preference is to not store the password in your Keychain. If you are logged into your machine another users could walk right up and open the dmg without typing a password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find My Mac]]></title>
    <link href="http://localhost:4000/blog/2014/05/19/find-my-mac/"/>
    <updated>2014-05-19T11:38:52-05:00</updated>
    <id>http://localhost:4000/blog/2014/05/19/find-my-mac</id>
    <content type="html"><![CDATA[<p>Under the hood of Find My Mac there are some security details that are not widely published. I take no credit to figuring these out since they were just recently brought to my attention. These are not details that a consumer would need to concern themselves with but I found them quite interesting. I decided to share what information I found.</p>

<hr />

<p>When a user enables Find My Mac (FMM) on their computer this is a system level change. This means if a user wishes to enable FMM they must be an administrator of the computer. A result of this is that in most environments where students are standard users this feature should never be enabled by accident. Another action that can be taken to limit FMM on machines under your management is to disable the iCloud prompt when a user logs into the machine for the first time. Look at Rich Trouton’s <a href="https://github.com/rtrouton/rtrouton_scripts/blob/master/rtrouton_scripts/disable_icloud_pop_up/disable_icloud_pop_up.sh">script</a> if you need a solution to do just that. </p>

<p>Some side affects of enabling FMM means giving access from <a href="https://www.icloud.com/#find">iCloud.com</a> to do the following:</p>

<ol>
  <li>play a sound on the computer</li>
  <li>lock the computer 
    <ul>
      <li>requiring a four (4) digit passcode</li>
      <li>optionally include a recovery message on the lock screen</li>
    </ul>
  </li>
  <li>erase the computer</li>
</ol>

<p>The web interface<br />
{% img /images/posts/2014-05-19/icloud-interface.png 600 420 %}</p>

<p>Close up of the options<br />
{% img /images/posts/2014-05-19/icloud-options.png %}</p>

<p>From my testing, if a computer is offline while one of these options are clicked from iCloud it takes approximately one minute for the signal to be processed on the computer in question (those this could be connectivity related). Playing a sound is by far the fastest option while taking less than one second most of the time when the computer is online. If you choice to lock the computer this will cause your computer will immediately lock up and restart. You will presented with the a screen like the following.<br />
{% img /images/posts/2014-05-19/icloud-lock.png 600 400 %}</p>

<p>Though I did not test, my guess is that an erase will prompt the computer to go into a state like the lock screen while deleting your data. If anyone feels like testing this feel free to contact me with results on twitter.</p>

<h2 id="nvram">NVRAM</h2>
<p>None of the information above is particularly shocking if you yourself have ever used Find my iPhone or any of the similar Find my device services from Apple. What is interesting is where this data is stored on your computer…the nvram. This means even if someone removes the hard drive of your computer the information to connect to iCloud is still present. This is great news if your laptop was actually stolen (and connected to the internet) but what does this mean when reassigning a computer that has had FMM enabled? Well the previous user could erase all the information on this laptop at any time in the future. So now I have to check with every user to see if they have had FMM enabled when reassigning a computer? Well, instead of dealing with that huge hassle when it comes around to re-imaging or reassigning a computer you can simply run the following command to clear the nvram of content related to Find my Mac. </p>

<p><strong>Disable iCloud from the Command Line</strong> <br />
{% highlight bash %}
$ nvram -d fmm-computer-name<br />
$ nvram -d fmm-mobileme-token-FMM
{% endhighlight %}</p>

<h2 id="consumers">Consumers</h2>
<p>This means if you ever purchase a second hand Mac from someone you will want to run the same command just for safty. Also, if you are attempting to sell your device be a good consumer and run the command for the next owner. </p>

<p>If you are not familiar with the command line use the following:</p>

<h4 id="resetting-nvram--pram">Resetting NVRAM / PRAM</h4>
<ol>
  <li>Shut down your Mac.</li>
  <li>Locate the following keys on the keyboard: Command (⌘), Option, P, and R. You will need to hold these keys down simultaneously in step 4.</li>
  <li>Turn on the computer.</li>
  <li>Press and hold the Command-Option-P-R keys before the gray screen appears.</li>
  <li>Hold the keys down until the computer restarts and you hear the startup sound for the second time.</li>
  <li>Release the keys. </li>
</ol>

<p><strong>Note</strong>: Apple ID’s are considered personal. Even if you use a work email address these are accounts are not designed to be use by more than ten (10) devices. This is a hard limit set by Apple. Do <em>not</em> attempt to setup all corporate laptops on one Apple ID it will not work. In fact do not use FMM, it was not designed for this…look into <a href="https://meraki.com/login/dashboard_login">Meraki</a> if you need a free solution.</p>

<hr />

<p>Articles: <a href="http://ilostmynotes.blogspot.com/2013/11/disable-find-my-mac-by-modifiying-nvram.html">Disable find my Mac</a>  </p>

<p>External resources regarding iCloud: <a href="http://www.apple.com/support/icloud/find-my-device/">Apple Find my Device Support</a>, 
<a href="http://www.cnet.com/how-to/how-to-use-find-my-mac-in-icloud/">Cnet</a>, <a href="http://www.macworld.com/article/2034795/how-to-track-a-lost-computer-with-find-my-mac.html">Macworld</a></p>
]]></content>
  </entry>
  
</feed>
    </div><!-- /.article-wrap -->
    
  </article>
</div><!-- /#index -->

<div class="footer-wrap">
  <footer>
    <div class="google-ads">
  <!-- 320 x 50 ad -->
  <script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
       style="display:inline-block;width:320px;height:50px"
       data-ad-client=""
       data-ad-slot=""></ins>
  <script>
  (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div><!-- /.google-ads -->

<span>&copy; 2014 Clayton Burlison. Powered by <a href="http://jekyllrb.com">Jekyll</a> using the <a href="http://mademistakes.com/minimal-mistakes/">Minimal Mistakes</a> theme.</span>

<script src="//static.getclicky.com/js" type="text/javascript"></script>
<script type="text/javascript">try{ clicky.init(100737449); }catch(e){}</script>
  </footer>
</div><!-- /.footer-wrap -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="http://localhost:4000/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="http://localhost:4000/assets/js/scripts.min.js"></script>

<!-- Asynchronous Google Analytics snippet -->
<script>
  var _gaq = _gaq || [];
  var pluginUrl = 
 '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
  _gaq.push(['_require', 'inpage_linkid', pluginUrl]);
  _gaq.push(['_setAccount', 'UA-49614309-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

          

</body>
</html>