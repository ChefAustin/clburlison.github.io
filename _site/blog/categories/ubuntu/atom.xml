<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Category: ubuntu &#8211; Just another tech blog</title>

<meta name="keywords" content="">



<!-- Twitter Cards -->
<meta name="twitter:title" content="Category: ubuntu">

<meta name="twitter:site" content="@clburlison">
<meta name="twitter:creator" content="@clburlison">

<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://clburlison.com/images/">

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Category: ubuntu">

<meta property="og:url" content="https://clburlison.com/blog/categories/ubuntu/atom.xml">
<meta property="og:site_name" content="Just another tech blog">





<link rel="canonical" href="https://clburlison.com/blog/categories/ubuntu/atom.xml">
<link href="https://clburlison.com/feed.xml" type="application/atom+xml" rel="alternate" title="Just another tech blog Feed">


<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="https://clburlison.com/assets/css/main.css">

<meta http-equiv="cleartype" content="on">

<!-- HTML5 Shiv and Media Query Support -->
<!--[if lt IE 9]>
	<script src="https://clburlison.com/assets/js/vendor/html5shiv.min.js"></script>
	<script src="https://clburlison.com/assets/js/vendor/respond.min.js"></script>
<![endif]-->

<!-- Modernizr -->
<script src="https://clburlison.com/assets/js/vendor/modernizr-2.7.1.custom.min.js"></script>

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="https://clburlison.com/favicon.ico">
<!-- 32x32 -->
<link rel="shortcut icon" href="https://clburlison.com/favicon.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="https://clburlison.com/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://clburlison.com/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://clburlison.com/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://clburlison.com/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body class="page">

<!--[if lt IE 9]><div class="browser-upgrade alert alert-info">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</div><![endif]-->

<div class="navigation-wrapper">
	<div class="site-name">
		<a href="https://clburlison.com">Just another tech blog</a>
	</div><!-- /.site-name -->
	<div class="top-navigation">
		<nav role="navigation" id="site-nav" class="nav">
		    <ul>
		        
					    
					        
					    
					    <li><a href="https://clburlison.com/about/" >About</a></li>
					  
					    
					        
					    
					    <li><a href="https://clburlison.com/resources/" >Resources</a></li>
					  
					    
					        
					    
					    <li><a href="https://clburlison.com/blog/archives/" >Archives</a></li>
					  
		    </ul>
		</nav>
	</div><!-- /.top-navigation -->
</div><!-- /.navigation-wrapper -->



<div id="main" role="main">
  <div class="article-author-side">
    



	<img src="https://clburlison.com/images/me.jpg" class="bio-photo" alt="Clayton Burlison bio photo"></a>

<h3>Clayton Burlison</h3>
<p>A Mac sysadmin, documenting useful code, ideas, & guides.</p>
<a href="mailto:clburlison@gmail.com" class="author-social" target="_blank"><i class="fa fa-envelope-square"></i> Email</a>
<a href="http://twitter.com/clburlison" class="author-social" target="_blank"><i class="fa fa-twitter-square"></i> Twitter</a>


<a href="http://linkedin.com/in/clburlison" class="author-social" target="_blank"><i class="fa fa-linkedin-square"></i> LinkedIn</a>


<a href="http://github.com/clburlison" class="author-social" target="_blank"><i class="fa fa-github"></i> Github</a>






  </div>
  <article>
    <h1>Category: ubuntu</h1>
    <div class="article-wrap">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Just another tech blog]]></title>
  <link href="https://clburlison.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="https://clburlison.com/"/>
  <updated>2014-10-27T07:39:10-05:00</updated>
  <id>https://clburlison.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Munkireport on Ubuntu 14.04 - Part 3]]></title>
    <link href="https://clburlison.com/blog/2014/10/23/munkirepo-guide-part-3/"/>
    <updated>2014-10-23T00:00:00-05:00</updated>
    <id>https://clburlison.com/blog/2014/10/23/munkirepo-guide-part-3</id>
    <content type="html"><![CDATA[<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#intro">Intro</a></li>
  <li><a href="#the-install">The Install</a>    <ul>
      <li><a href="#installing-required-software">Installing Required Software</a></li>
      <li><a href="#setup-mysql">Setup MySQL</a>        <ul>
          <li><a href="#creating-the-database">Creating the database</a></li>
        </ul>
      </li>
      <li><a href="#configure-php">Configure php</a></li>
      <li><a href="#downloading-munkireport">Downloading MunkiReport</a></li>
      <li><a href="#configure-nginx-for-munkireport">Configure nginx for MunkiReport</a></li>
    </ul>
  </li>
  <li><a href="#servernameshashbucketsize-64">server_names_hash_bucket_size 64;</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#apendium-1---connecting-a-client-to-munkireport">Apendium 1 - connecting a client to MunkiReport</a></li>
  <li><a href="#apendium-2---adding-munkireport-to-your-munkirepo">Apendium 2 - adding MunkiReport to your munki_repo</a></li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<h1 id="intro">Intro</h1>
<p>Welcome to the third part in our munki server setup series. In this section, we will download and configure <a href="https://github.com/munkireport/munkireport-php">Munkireport-php</a> on our munki server.</p>

<p>Before we get to far you might want to head over to <a href="/blog/2014/10/06/munkirepo-guide-part-1/">Part 1 - Setting up the munki repo</a> or <a href="/blog/2014/10/19/munkirepo-guide-part-2/">Part 2 - Setting up mandrill</a>. Parts 1 and 2 are not technically required for MunkiReport by you will want to have an understanding of how the other components of your munki server work before setting up the reporting server. </p>

<p>If you have no idea what MunkiReport is go check out this <a href="https://munkireportphp-nbalonso.rhcloud.com/">Demo site</a> hosted by <a href="http://www.nbalonso.com/">Noel</a>. Noel has a custom color scheme but it should give you an idea of the system.</p>

<p><img src="/images/posts/2014-10-23/mr.png" width="600"></p>

<h1 id="the-install">The Install</h1>
<p>Munkireport is a web application written in php that displays useful stats about your munki fleet. The resources taken up by MunkiReport are quite small but like all web apps if you client base grows very large you will want to make sure the database can keep up. With that you can install MunkiReport on any compatible web-server (IIS, apache, or nginx) for this guide we will be using our munki server from Parts 1 &amp; 2 as our reporting server.</p>

<p>Part of this installation includes setting up MySQL as our database backend. SQLite is the default database but I highly recommend setting my MySQL since the <a href="https://github.com/munkireport/munkireport-php/wiki/Performance">performance</a> gains are high and setup only takes a few more steps, not to mention SQLite will start to choke when higher volumes of clients start to check-in with the reporting server. </p>

<p>It is also important to note, I like MunkiReport to be hosted on a sub-directory. This means when connecting to MuniReport you will type <a href="">http://yourserver.example.com/report/</a> to access the site. If you want a different setup, you will need to make the necessary changes.</p>

<h2 id="installing-required-software">Installing Required Software</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo apt-get update
sudo apt-get -y install nginx git php5-fpm php5-mysql php5-ldap</code></pre></div></p>

<p><em>Note:</em> the <code>php5-ldap</code> package is only needed if you are planning on connecting to an Active Directory or LDAP directory for authenticating to MunkiReport. </p>

<h2 id="setup-mysql">Setup MySQL</h2>

<p>Lets install MySQL</p>

<p><code>sudo apt-get install mysql-client mysql-server</code></p>

<p><strong>This will prompt you to create the root mysql database account. Do not forget the password you set.</strong></p>

<p>Now, we need to tell MySQL to generate the directory structure it needs to store its databases and information. We can do this by typing:</p>

<p><code>sudo mysql_install_db</code></p>

<p>Next, you can optionally run a simple security script that will prompt you to modify some insecure defaults (this is highly recommended on production servers). Begin the script by typing:</p>

<p><code>sudo mysql_secure_installation</code></p>

<p>You will need to enter the MySQL root password that you selected during installation.</p>

<p>During the secure installation script it will ask if you want to change the root password. If you are happy with your MySQL root password, type “N” for no and hit “ENTER”. Afterwards, you will be prompted to remove some test users and databases. You should choice “Y” and hit “enter” through these prompts to remove the “unsafe” defaults from installation.</p>

<p>Once the script has been run, MySQL is ready to go.</p>

<h3 id="creating-the-database">Creating the database</h3>

<p>Lets create our MunkiReport database with the name of <code>munkireport</code>. We will also create a database user and password. Change <em>USERNAME</em> and <em>PASSWORD</em> to your preference. Note the database username that is created below is what you will enter into your config.php in the following steps. It is bad practice to use the root account for database entry.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;echo “CREATE DATABASE munkireport CHARACTER SET utf8 COLLATE utf8_bin<span class="p">;</span>”&lt;/td&gt;
      &lt;td&gt;mysql -u root -p&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;echo “CREATE USER ‘USERNAME’@’localhost’ IDENTIFIED BY ‘PASSWORD’<span class="p">;</span>”&lt;/td&gt;
      &lt;td&gt;mysql -u root -p&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;echo “GRANT ALL PRIVILEGES ON munkireport.* TO ‘USERNAME’@’localhost’ IDENTIFIED BY ‘PASSWORD’<span class="p">;</span>”&lt;/td&gt;
      &lt;td&gt;mysql -u root -p&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;echo “FLUSH PRIVILEGES<span class="p">;</span>”&lt;/td&gt;
      &lt;td&gt;mysql -u root -p&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;</code></pre></div></p>

<h2 id="configure-php">Configure php</h2>
<p>Lets make one small change to the default php configuration.</p>

<p><code>sudo nano /etc/php5/fpm/php.ini</code></p>

<p>Find the line, <strong>cgi.fix_pathinfo=1</strong>, and change the <strong>1 to 0</strong>. Also, uncomment this line to enable this security setting. The file should now look like the below excerpt:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>lt<span class="p">;</span>—————&lt;/p&gt;

&lt;p&gt;<span class="p">;</span> cgi.fix_pathinfo provides &lt;em&gt;real&lt;/em&gt; PATH_INFO/PATH_TRANSLATED support <span class="k">for</span> CGI.  PHP’s
<span class="p">;</span> previous behaviour was to <span class="nb">set </span>PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok
<span class="p">;</span> what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting
<span class="p">;</span> this to <span class="m">1</span> will cause PHP CGI to fix its paths to conform to the spec.  A setting
<span class="p">;</span> of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts
<span class="p">;</span> to use SCRIPT_FILENAME rather than PATH_TRANSLATED.
<span class="p">;</span> http://php.net/cgi.fix-pathinfo
cgi.fix_pathinfo<span class="o">=</span>0&lt;/p&gt;

&lt;p&gt;—————<span class="p">&amp;</span>gt<span class="p">;</span></code></pre></div></p>

<p>If this number is kept as 1, the php interpreter will do its best to process the file that is as near to the requested file as possible. This is a possible security risk. If this number is set to 0, conversely, the interpreter will only process the exact file path—a much safer alternative. Save and Exit. </p>

<p>Now, restart php-fpm for the change to take affect:</p>

<p><code>sudo service php5-fpm restart</code></p>

<h2 id="downloading-munkireport">Downloading MunkiReport</h2>

<p>We are finally to the point that we can start getting MunkiReport setup.</p>

<p><code>sudo git clone https://github.com/munkireport/munkireport-php /usr/share/nginx/html/report</code></p>

<p>At this point, lets create a link to our report folder for our local Ubuntu admin, this allows us to make modifications easier in the future. </p>

<p><code>sudo ln -s /usr/share/nginx/html/report ~/report</code></p>

<p>MunkiReport requires a config.php, this is your settings for MunkiReport. Below are some defaults that I think most users will want. For a full list of options please visit <a href="https://github.com/munkireport/munkireport-php/blob/master/config_default.php">here</a>.</p>

<p>You will want to change  the following in your config.php file: </p>

<ul>
  <li>sitename = change Company to something useful</li>
  <li>allow_migrations = you will want to change this to true for MunkiReport updates</li>
  <li>debug = change this to false if you don’t need debugging</li>
  <li>timezone = for your <a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">timezone</a></li>
  <li>ssh = change <em>ladmin</em> to your company local mac admin account</li>
  <li>locale = change to location</li>
  <li>lang = change to your language</li>
</ul>

<p>The root account is created for you, for testing purposes. You will want to create your own admin account by visiting <a href="http://yourserver.example.com/report/auth/generate">http://yourserver/report/auth/generate</a>.</p>

<p>The last section of the config file deals with out MySQL database. You will want to change the username and password to match what you created in the previous step.</p>

<p><code>sudo nano /usr/share/nginx/html/report/config.php</code></p>

<p><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php if ( ! defined( ‘KISS’ ) ) exit;&lt;/p&gt;</span>

<span class="x">&lt;p&gt;$conf[‘index_page’] = ‘index.php?’;</span>
<span class="x">$conf[‘sitename’] = ‘Company - MunkiReport’;</span>
<span class="x">$conf[‘allow_migrations’] = FALSE;</span>
<span class="x">$conf[‘debug’] = TRUE;</span>
<span class="x">$conf[‘timezone’] = @date_default_timezone_get(America/Chicago);</span>
<span class="x">$conf[‘vnc_link’] = “vnc://%s:5900”;</span>
<span class="x">$conf[‘ssh_link’] = “ssh://ladmin@%s”;</span>
<span class="x">ini_set(‘session.cookie_lifetime’, 43200);</span>
<span class="x">$conf[‘locale’] = ‘en_US’;</span>
<span class="x">$conf[‘lang’] = ‘en’;</span>
<span class="x">$conf[‘keep_previous_displays’] = TRUE;&lt;/p&gt;</span>

<span class="x">&lt;p&gt;/*</span>
<span class="x">|===============================================</span>
<span class="x">| Authorized Users of Munki Report</span>
<span class="x">|===============================================</span>
<span class="x">| Visit http://munki/report/auth/generate to generate additional local values</span>
<span class="x">*/</span>
<span class="x">$auth_config[‘root’] = ‘$P$BUqxGuzR2VfbSvOtjxlwsHTLIMTmuw0’; // Password is root&lt;/p&gt;</span>

<span class="x">&lt;p&gt;/*</span>
<span class="x">|===============================================</span>
<span class="x">| PDO Datasource</span>
<span class="x">|===============================================</span>
<span class="x">*/</span>
<span class="x">$conf[‘pdo_dsn’] = ‘mysql:host=localhost;dbname=munkireport’;</span>
<span class="x">$conf[‘pdo_user’] = ‘munki’;</span>
<span class="x">$conf[‘pdo_pass’] = ‘munki’;</span>
<span class="x">$conf[‘pdo_opts’] = array(PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; ‘SET NAMES utf8’);</span></code></pre></div></p>

<p>We are an Active Directory shop at my work place and for that reason I really like the ability for MunkiReport to pull an AD group and give access (remember the php5-ldap package we installed earlier). Unfortunately, in my current testing this function is slightly broken at the moment. When attempting to login to MunkiReport using AD Group Authorization you will be presented a white screen. A refresh on the blank screen along with a “Resend form data” will get you to the dashboard. This is a pretty annoying inconvenience, so at this moment I have simply added our report administrators into the ‘allowed_users’ line in my config.php.  </p>

<p>Below are the additional settings need to make Active Directory work with MunkiReport:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;// Below are the options <span class="k">for</span> Active Directory user authorization
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘account_suffix’<span class="o">]</span> <span class="o">=</span> ‘@example.com’<span class="p">;</span>
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘base_dn’<span class="o">]</span> <span class="o">=</span> <span class="nv">dc</span><span class="o">=</span>example,dc<span class="o">=</span>come<span class="p">;</span> //set to NULL to auto-detect
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘domain_controllers’<span class="o">]</span> <span class="o">=</span> array<span class="o">(</span>‘server1.example.com’,’server2.example.com’<span class="o">)</span><span class="p">;</span> //can be an array of servers
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘admin_username’<span class="o">]</span> <span class="o">=</span> ‘admin’<span class="p">;</span> //if needed to perform the search
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘admin_password’<span class="o">]</span> <span class="o">=</span> ‘munki_is_cool’<span class="p">;</span> //if needed to perform the search
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘mr_allowed_users’<span class="o">]</span> <span class="o">=</span> array<span class="o">(</span>‘userA’,’userB’,’userC’<span class="o">)</span><span class="p">;</span>
<span class="nv">$conf</span><span class="o">[</span>‘auth’<span class="o">][</span>‘auth_AD’<span class="o">][</span>‘mr_allowed_groups’<span class="o">]</span> <span class="o">=</span> array<span class="o">(</span>‘MunkiReportAdmins’<span class="o">)</span><span class="p">;</span> //case sensitive&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h2 id="configure-nginx-for-munkireport">Configure nginx for MunkiReport</h2>

<p>Lets configure nginx to use <a href="http://yourserver.example.com/report">http://yourserver.example.com/report</a></p>

<p><code>sudo nano /etc/nginx/sites-enabled/default</code>  </p>

<p><em>Note:</em> make sure and change your server_name. This file also takes care of our munki_repo from <a href="/blog/2014/10/06/munkirepo-guide-part-1/">Part 1</a>.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">server <span class="o">{</span>
	listen <span class="m">80</span> default_server<span class="p">;</span>
	listen <span class="o">[</span>::<span class="o">]</span>:80 default_server <span class="nv">ipv6only</span><span class="o">=</span>on<span class="p">;</span>&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root /usr/share/nginx/html<span class="p">;</span>
index index.php index.html index.htm<span class="p">;</span>

server_name munki<span class="p">;</span>
    
error_page <span class="m">404</span> /404.html<span class="p">;</span>
error_page <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span> /50x.html<span class="p">;</span>
<span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
    root /usr/share/nginx/html<span class="p">;</span>
<span class="o">}</span>

location /report <span class="o">{</span>
    try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
<span class="o">}</span>

location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
    try_files <span class="nv">$uri</span> <span class="o">=</span>404<span class="p">;</span>
    fastcgi_split_path_info ^<span class="o">(</span>.+<span class="se">\.</span>php<span class="o">)(</span>/.+<span class="o">)</span><span class="nv">$;</span>
    fastcgi_pass unix:/var/run/php5-fpm.sock<span class="p">;</span>
    fastcgi_index index.php<span class="p">;</span>
    include fastcgi_params<span class="p">;</span>
<span class="o">}</span>

location /munki_repo/ <span class="o">{</span>
  <span class="nb">alias</span> /usr/local/munki_repo/<span class="p">;</span>
  autoindex off<span class="p">;</span>
  auth_basic <span class="s2">&quot;Restricted&quot;</span><span class="p">;</span>
  auth_basic_user_file /etc/nginx/.htpasswd<span class="p">;</span>   <span class="o">}</span> <span class="o">}</span></code></pre></div>
</code></pre>

<p>We must change our nginx default settings for php to work. </p>

<p><code>sudo nano /etc/nginx/nginx.conf</code></p>

<p>Look for <code>default_type  application/octet-stream;</code> and comment this line out. Check out the below excerpt:</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>lt<span class="p">;</span>—————&lt;/p&gt;

&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;servernameshashbucketsize-64&quot;</span>&gt;server_names_hash_bucket_size 64<span class="p">;</span>&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;    <span class="c"># server_name_in_redirect off;</span>

    include /etc/nginx/mime.types<span class="p">;</span>
    <span class="c">#default_type application/octet-stream; //comment me out for MunkiReport to work</span>

    <span class="c">##</span>
    <span class="c"># Logging Settings</span>
    <span class="c">##</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;—————<span class="p">&amp;</span>gt<span class="p">;</span></code></pre></div></p>

<p>To test your nginx configuration run the following command. This will make sure that you have no errors.</p>

<p><code>sudo nginx -c /etc/nginx/nginx.conf -t</code></p>

<p>Restart Nginx to make the necessary changes:</p>

<p><code>sudo service nginx restart</code></p>

<h1 id="conclusion">Conclusion</h1>
<p>You should now have a basic MunkiReport configuration up and running. Double check that everything is working by visiting <a href="http://youserver.example.com/report/">http://youserver.example.com/report/</a>. Remember the default username and password, <code>root</code>. For more settings and additional information please visit the Wiki for <a href="https://github.com/munkireport/munkireport-php/wiki">MunkiReport</a>.</p>

<p>As always feel free to drop a comment below or on Twitter. Feedback is always appreciated.</p>

<hr />

<h1 id="apendium-1---connecting-a-client-to-munkireport">Apendium 1 - connecting a client to MunkiReport</h1>
<p>If you would like to connect a single munki client to MunkiReport you can use the following command:</p>

<p><code>sudo /bin/bash -c "$(curl -s http://yourserver.example.com/report/index.php?/install)"</code></p>

<h1 id="apendium-2---adding-munkireport-to-your-munkirepo">Apendium 2 - adding MunkiReport to your munki_repo</h1>
<p>To add multiple Munki clients to MunkiReport we should use munki. To get a generated plist file that you can drop into your <em>munki_repo/pkginfo</em> directory run the following command.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">curl -s https://yourserver.example.com/report/index.php?/install/plist -o <span class="se">\</span>
~/Desktop/MunkiReport.plist</code></pre></div></p>

<p>The output file will end up on your Desktop for easy transfer to your repo.</p>

<hr />

<p>Articles:<br />
<a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04">Install LEMP stack on Ubuntu 14.04</a>,<br />
<a href="https://github.com/munkireport/munkireport-php/wiki">Munkireport Wiki</a>,<br />
<a href="http://www.nbalonso.com/new-munkireport-php-2/">nbalonso Munkireport-php</a>,  </p>

<p>Updated: Oct. 24, 2014 - Spelling</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Mandrill on Ubuntu 14.04 - Part 2]]></title>
    <link href="https://clburlison.com/blog/2014/10/19/munkirepo-guide-part-2/"/>
    <updated>2014-10-19T22:55:49-05:00</updated>
    <id>https://clburlison.com/blog/2014/10/19/munkirepo-guide-part-2</id>
    <content type="html"><![CDATA[<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#intro">Intro</a></li>
  <li><a href="#the-install">The Install</a>    <ul>
      <li><a href="#creating-users--groups">Creating Users &amp; Groups</a></li>
      <li><a href="#install-build-tools">Install build tools</a></li>
      <li><a href="#install-nodejs">Install NodeJS</a></li>
      <li><a href="#install-nginx--pm2">Install Nginx &amp; pm2</a></li>
    </ul>
  </li>
  <li><a href="#install-startup-scripts-to-make-sure-pm2-and-all-its-daemons">install startup scripts to make sure pm2 and all its daemons</a>    <ul>
      <li><a href="#configuring-pm2">Configuring pm2</a></li>
      <li><a href="#configuring-nginx">Configuring Nginx</a></li>
      <li><a href="#install-meteor">Install Meteor</a></li>
    </ul>
  </li>
  <li><a href="#next-install-meteorite">next, install meteorite</a>    <ul>
      <li><a href="#install-mongodb">Install MongoDB</a></li>
      <li><a href="#installing-mandrill">Installing Mandrill</a></li>
    </ul>
  </li>
  <li><a href="#if-you-want-the-latest-source-code-youre-done-however">If you want the latest source code, you’re done. However,</a>    <ul>
      <li><a href="#mandrill-settings">Mandrill Settings</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<h1 id="intro">Intro</h1>
<p>This is Part 2 of a series on setting up a munki server on Ubuntu 14.04. Read <a href="/blog/2014/10/06/munkirepo-guide-part-1/">Part 1 here</a>. This section goes over setting up <a href="https://github.com/wollardj/Mandrill">Mandrill</a> so we can edit our repo metadata files, modify manifests, and assign new software to our fleet using a web browser. </p>

<p>A brief description of Mandrill.</p>

<blockquote>
  <p>Multi-user web front-end for managing a Munki repository. If you’re here because of MailChimp, my apologies but this isn’t the Mandrill you’re looking for. /wavehand  </p>

  <p>Mandrill is a NodeJS web application written using the Meteor framework. It supports one database engine: MongoDB. There are no plans to support other engines, but fear not, mandrillctl will install and secure MongoDB for you. If you already have MongoDB running on your server via homebrew, you should probably remove that installation first, or use an alternate server.  </p>

  <p>–Joe Wollard</p>
</blockquote>

<p><img src="/images/posts/2014-10-19/mandrill.png" width="600"></p>

<h1 id="the-install">The Install</h1>
<p>Lucky for us Joe, the developer, has excellent documentation for installation on Ubuntu. Unfortunately, the documentation is for an older version of Ubuntu and some of the commands need modification to work with 14.04 and this series. Instead of redirecting you back and forth between his guide and this, I decided to include all the commands required below without the descriptions. For more information on what/why you are doing something please reference the wiki <a href="https://github.com/wollardj/Mandrill/wiki">here</a>.</p>

<p>To document changes from Joe’s original guide all code changes will have <code># updated from wiki</code> appended to code blocks. </p>

<h2 id="creating-users--groups">Creating Users &amp; Groups</h2>

<p>Lets create the Mandrill user and munki group along with allow mandrill access to modify our munki repo.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo addgroup –system munki
sudo adduser –system _mandrill –ingroup munki –force-badname
sudo chown -R _mandrill:munki /usr/local/munki_repo/
sudo chmod -R <span class="m">2774</span> /usr/local/munki_repo</code></pre></div></p>

<p><em>Note:</em> You should receive an error from creating the ‘munki’ group if you went through <a href="/blog/2014/10/06/munkirepo-guide-part-1/">Part 1</a>. This is fine move along.</p>

<h2 id="install-build-tools">Install build tools</h2>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo apt-get install git curl build-essential</code></pre></div></p>

<h2 id="install-nodejs">Install NodeJS</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~/
curl -O http://nodejs.org/dist/v0.10.26/node-v0.10.26-linux-x64.tar.gz
sudo tar –strip-components <span class="m">1</span> -C /usr/local -zxf node-v0.10.26-linux-x64.tar.gz
rm node-v0.10.26-linux-x64.tar.gz</code></pre></div></p>

<h2 id="install-nginx--pm2">Install Nginx &amp; pm2</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo apt-get install nginx
sudo npm install pm2 -g –unsafe-perm <span class="c"># updated from wiki&lt;/p&gt;</span>

&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;install-startup-scripts-to-make-sure-pm2-and-all-its-daemons&quot;</span>&gt;install startup scripts to make sure pm2 and all its daemons&lt;/h1&gt;
&lt;p&gt;# respawn when the server reboots.
sudo pm2 startup ubuntu</code></pre></div></p>

<h2 id="configuring-pm2">Configuring pm2</h2>
<p><em>–direct from wiki start–</em><br />
Be sure to change ROOT_URL and PORT to values appropriate for your environment! If you’re running a MongoDB instance on another server, or if your MongoDB instance requires authentication, you should change MONGO_URL as well.</p>

<p>One thing you should not change is instances as Mandrill is not currently aware of other instances of itself and will needlessly consume resources.<br />
<em>–end–</em></p>

<p><code>sudo nano /usr/local/etc/mandrilld.json</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;<span class="o">[{</span>
    “name”: “mandrilld”,
    “script”: “/usr/local/Mandrill/main.js”,
    “env”: <span class="o">{</span>
        “ROOT_URL”: “http://192.168.20.133:3001”,
        “PORT”: “3001”,
        “MONGO_URL”: “mongodb://localhost:27017/Mandrill”,
        “MANDRILL_MODE”: “production”
    <span class="o">}</span>,
    “instances”: “1”,
    “error_file”: “/var/log/mandrill/mandrill-err.log”,
    “out_file”: “/var/log/mandrill/mandrill.log”,
    “pid_file”: “/var/run/mandrill.pid”
<span class="o">}]</span></code></pre></div></p>

<p>The log directory must exist before you start mandrilld for the first time.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo mkdir /var/log/mandrill</code></pre></div></p>

<h2 id="configuring-nginx">Configuring Nginx</h2>

<p>If you read my Part 1 guide before October 19th you will want to follow the new steps from <a href="/blog/2014/10/06/munkirepo-guide-part-1/#setting-up-nginx">Part 1 - Setting up Nginx</a>. These changes were made in order to accommodate Munkireport, which we will setup next.</p>

<p>At this point, you have two options that you need to be aware of for using Mandrill:</p>

<ul>
  <li>Use the  default port 3001 </li>
  <li>Setup a DNS A record for your server</li>
</ul>

<p>You get these choices since we will be setting up Munkireport next. Since I am not in charge of the network at my workplace I will simply leave Nginx alone and connect via port 3001. If however you would like to access Mandrill via a sub domain name or alternate address you can follow the original setup steps below. Just make sure and change your server_name to a record that is not the current hostname of your server. This change is necessary since by default Mandrill needs redirects for both the root directory of your web-server and /mandrill to work.</p>

<p><a href="https://github.com/wollardj/Mandrill/wiki/Configuring-Nginx-%28Ubuntu%29">Configuring Nginx in Ubuntu</a></p>

<h2 id="install-meteor">Install Meteor</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># First, install meteor</span>
curl https://install.meteor.com <span class="p">|</span> /bin/sh&lt;/p&gt;

&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;next-install-meteorite&quot;</span>&gt;next, install meteorite&lt;/h1&gt;
&lt;p&gt;sudo npm install -g meteorite</code></pre></div></p>

<h2 id="install-mongodb">Install MongoDB</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo apt-key adv –keyserver hkp://keyserver.ubuntu.com:80 <span class="se">\</span>
    –recv 7F0CEB10&lt;/p&gt;

&lt;p&gt;echo ‘deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen’ <span class="se">\</span>
    <span class="p">|</span> sudo tee /etc/apt/sources.list.d/mongodb.list&lt;/p&gt;

&lt;p&gt;sudo apt-get update
sudo apt-get install mongodb-10gen</code></pre></div></p>

<h2 id="installing-mandrill">Installing Mandrill</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone https://github.com/wollardj/Mandrill.git&lt;/p&gt;

&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;if-you-want-the-latest-source-code-youre-done-however&quot;</span>&gt;If you want the latest <span class="nb">source </span>code, you’re <span class="k">done</span>. However,&lt;/h1&gt;
&lt;p&gt;# I suggest sticking with the latest release…
<span class="nb">cd </span>Mandrill
git checkout tags/&lt;code&gt;git tag -l <span class="p">|</span> tail -n 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;sudo mrt bundle Mandrill.tar.gz <span class="c"># updated from wiki&lt;/p&gt;</span>

&lt;p&gt;sudo mkdir /usr/local/Mandrill
sudo tar –strip-components <span class="m">1</span> -C /usr/local/Mandrill -zxf Mandrill.tar.gz&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>Now lets manually start our mandrill site.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo pm2 start /usr/local/etc/mandrilld.json
sudo service mongod start</code></pre></div></p>

<p>Visit to verify that everything is working <a href="">http://munki:3001</a></p>

<h2 id="mandrill-settings">Mandrill Settings</h2>

<p>Log into the web portal with the default username <em>admin</em> and password <em>admin</em>. You will obviously want to change this password to something more secure. Under the mandrill settings tab you will want to change your repo path to <code>/usr/local/munki_repo/</code>.</p>

<p><img src="/images/posts/2014-10-19/mandrill_settings.png" width="600"></p>

<h1 id="conclusion">Conclusion</h1>
<p>Mandrill is setup! Stay tuned for Part 3, setting up Munkireport.</p>

<hr />

<p>Articles:<br />
<a href="https://github.com/wollardj/Mandrill/wiki">Mandrill Wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Munki repo on Ubuntu 14.04 - Part 1]]></title>
    <link href="https://clburlison.com/blog/2014/10/06/munkirepo-guide-part-1/"/>
    <updated>2014-10-06T22:55:49-05:00</updated>
    <id>https://clburlison.com/blog/2014/10/06/munkirepo-guide-part-1</id>
    <content type="html"><![CDATA[<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#intro">Intro</a></li>
  <li><a href="#the-install">The Install</a>    <ul>
      <li><a href="#installing-required-software">Installing Required Software</a>        <ul>
          <li><a href="#setup-the-directories">Setup the directories:</a></li>
          <li><a href="#creating-the-service-accounts--set-directory-permissions">Creating the service accounts &amp; set directory permissions:</a></li>
        </ul>
      </li>
      <li><a href="#setting-up-nginx">Setting up Nginx</a>        <ul>
          <li><a href="#securing-your-munkirepo">Securing your munki_repo</a></li>
        </ul>
      </li>
      <li><a href="#setting-up-samba">Setting up Samba</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<h1 id="intro">Intro</h1>

<p>As you might have guessed from my previous <a href="/blog/2014/10/02/reposado-guide/">post</a>, I am trying to standardize at work. Part of this was to move many core OS X services away from OS X Server and towards Ubuntu. This will allow us to use our existing virtualization infrastructure. After reposado the next big service was our munki repo. </p>

<p><img class="center" src="/images/posts/2014-10-06/munki.jpg" width="400" height="400"></p>

<p><a href="http://github.com/munki/munki">Munki</a> is a very powerful open source tool for patch management and software updates for OS X clients. The client component is pretty easy to install but the server component can be a bit more tricky for newer administrators. The goal of this guide is to walk through setting up the server web share with http basic authentication (read simply security), and lastly setup samba so we can remote into our web server to manage files. </p>

<p>In the past, our munki_repo has been shared using apache but due to some research and a few internal tests I will be using nginx as the backend in this guide. </p>

<p>Since our Munki setup has many add-on projects including: <a href="https://github.com/wollardj/Mandrill">mandrill</a>,  <a href="https://github.com/munkireport/munkireport-php/">munkireport-php</a>, and our in-house rsync replication I will be splitting this series into multiple parts. </p>

<p><img src="/images/posts/2014-10-06/managed_software_center.png" width="600" height="600"></p>

<h1 id="the-install">The Install</h1>

<p>As a matter of good practice, we are going to make sure our Ubuntu server is fully patched before we start. Then we will install <em>git, curl, build-essential, nginx, and apache2-utils, samba</em>. </p>

<h2 id="installing-required-software">Installing Required Software</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get -y install git curl build-essential nginx apache2-utils samba&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h3 id="setup-the-directories">Setup the directories:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo mkdir /usr/local/munki_repo
sudo mkdir -p /etc/nginx/sites-enabled/
ln -s /usr/local/munki_repo/ ~/
<span class="nb">cd</span> /usr/local/munki_repo
sudo mkdir catalogs client_resources icons manifests pkgs pkgsinfo&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h3 id="creating-the-service-accounts--set-directory-permissions">Creating the service accounts &amp; set directory permissions:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo addgroup –system munki
sudo adduser –system munki –ingroup munki
sudo usermod -a -G munki <span class="nv">$USER</span> <span class="c"># Adds the current console user to munki group</span>
sudo usermod -a -G munki www-data <span class="c"># Adds web user to munki group</span>
sudo chown -R <span class="nv">$USER</span>:munki /usr/local/munki_repo
sudo chmod -R <span class="m">2774</span> /usr/local/munki_repo&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h2 id="setting-up-nginx">Setting up Nginx</h2>
<p><em>Note:</em> if you read this guide before October 19th issue the following command before preceding to the setup below.<br />
<code>sudo rm /etc/nginx/sites-enabled/munki_repo.conf</code></p>

<p>Nginx is fast, light-weight, and uses a fraction of the resources that Apache uses. But don’t take my word for it there are lots of <a href="http://arstechnica.com/business/2011/11/a-faster-web-server-ripping-out-apache-for-nginx/">other reason</a> why <a href="http://wiki.nginx.org/WhyUseIt">you might want to use Nginx</a>.</p>

<p>Nginx’s installation on Ubuntu is very similar to Apache’s. All of its config files are stored in <em>/etc/nginx</em>.</p>

<p>Lets backup the original default file create and create our own.    </p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bkup
sudo nano /etc/nginx/sites-available/default</code></pre></div></p>

<p>Make sure and change the server_name to match your server’s FQDN or IP.</p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html">server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>root /usr/share/nginx/html;
  index index.php index.html index.htm;<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>server_name munki;<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>location /munki_repo/ {
    alias /usr/local/munki_repo/;
    autoindex off;
    auth_basic “Restricted”;
    auth_basic_user_file /etc/nginx/.htpasswd;
  }
}<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>And finally start the nginx service.<br />
<code>sudo /etc/init.d/nginx start</code></p>

<h3 id="securing-your-munkirepo">Securing your munki_repo</h3>
<p>For my purpose, I will be securing my munki_repo with simple http basic authentication. Depending on the needs of your organization this might be enough but you might need to look into ssl and other advanced options. If you are interesting in these options check out the <a href="https://github.com/munki/munki/wiki">munki wiki</a>.</p>

<p><strong>Create an http user and password</strong>
<code>sudo htpasswd -c /etc/nginx/.htpasswd munkihttpuser</code></p>

<p>The tool will prompt you to enter a password (make it strong).
<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;New password: &lt;strong&gt;**&lt;/strong&gt;
Re-type new password: &lt;strong&gt;**&lt;/strong&gt;
Adding password <span class="k">for</span> user munkihttpuser&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>The structure of the htpasswd is <code>login:password_hash</code>.</p>

<p>We must reload the nginx service to update the reflected change.<br />
<code>sudo /etc/init.d/nginx reload</code></p>

<p>Now when you try to access your website, <a href="">http://yourmunkiserver/munki_repo/</a>, you will notice a browser prompt that asks you to enter the login and password. Enter the details that you used while creating the .htpasswd file. The prompt does not allow you to access the website till you enter the right credentials. The munki client supports this security feature with the AdditionalHttpHeaders key <a href="https://github.com/munki/munki/wiki/Using-Basic-Authentication#configuring-the-clients-to-use-a-password">more info</a>.</p>

<p><em>Note:</em> If you do not want to secure your munki repo you can remove this setting in the above ngix config file by removing the two lines that start with <em>auth_basic</em>.</p>

<h2 id="setting-up-samba">Setting up Samba</h2>
<p>Now we just need a way to mount our munki_repo on a mac so we can do administrative things. Samba uses a separate set of passwords than the standard Linux system accounts (stored in /etc/samba/smbpasswd), so you’ll need to create a Samba password for yourself.  </p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo smbpasswd -a munki
<span class="c">#output on the following lines</span>
New SMB password: &lt;strong&gt;***
Retype new SMB password: **&lt;/strong&gt;
Added user munki.</code></pre></div></p>

<p>Now we need to share the munki_repo. Once “smb.conf” has loaded, add this to the very end of the file:<br />
<code>sudo nano /etc/samba/smb.conf</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;<span class="o">[</span>munki_repo<span class="o">]</span>
<span class="nv">path</span> <span class="o">=</span> /usr/local/munki_repo 
<span class="nv">available</span> <span class="o">=</span> yes
valid <span class="nv">users</span> <span class="o">=</span> munki    &lt;br /&gt;
<span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> no
<span class="nv">browseable</span> <span class="o">=</span> yes
<span class="nv">public</span> <span class="o">=</span> no 
<span class="nv">writable</span> <span class="o">=</span> yes</code></pre></div></p>

<p>Test for errors with the config file with: <code>testparm</code></p>

<p>Now we must restart samba.<br />
<code>sudo restart smbd</code></p>

<p>From your mac you will be able to access the munki_repo with the following <a href="">smb://munki.example.com/munki_repo</a>.</p>

<h1 id="conclusion">Conclusion</h1>
<p>We now have a working munki_repo fully configured and ready for use to start importing packages into the repo. If you are really new to Munki, this takes care of the “Demonstration Setup” section from the <a href="https://github.com/munki/munki/wiki">munki wiki</a>. To start populating Munki with manifests, packages, and more I would recommend using <a href="https://github.com/hjuutilainen/munkiadmin">MunkiAdmin</a>.</p>

<hr />

<p>Articles:<br />
<a href="https://www.digitalocean.com/community/tutorials/how-to-configure-the-nginx-web-server-on-a-virtual-private-server">How to configure Nginx</a>,<br />
<a href="http://wiki.nginx.org/Configuration">Configuration - Official nginx documentation</a>,<br />
<a href="https://help.ubuntu.com/community/How%20to%20Create%20a%20Network%20Share%20Via%20Samba%20Via%20CLI%20(Command-line%20interface/Linux%20Terminal)%20-%20Uncomplicated,%20Simple%20and%20Brief%20Way!">Samba Setup</a>,<br />
<a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-http-authentication-with-nginx-on-ubuntu-12-10">Basic Http Auth with Nginx</a>,  </p>

<p>Update:<br />
Oct. 16, 2014 - Removed note about the htpasswd that was incorrect.<br />
Oct. 17, 2014 - Move samba error test command before you restart the samba service. Add reference URL to your munkiserver for authentication testing purposes.<br />
Oct. 19, 2014 - Nginx settings are now done in the <code>default</code> file. This change was made to support Munkireport.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Reposado + Margarita on Ubuntu 14.04]]></title>
    <link href="https://clburlison.com/blog/2014/10/02/reposado-guide/"/>
    <updated>2014-10-02T22:55:49-05:00</updated>
    <id>https://clburlison.com/blog/2014/10/02/reposado-guide</id>
    <content type="html"><![CDATA[<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#intro">Intro</a></li>
  <li><a href="#the-software">The software</a></li>
  <li><a href="#the-install">The Install</a>    <ul>
      <li><a href="#installing-required-software">Installing Required Software</a>        <ul>
          <li><a href="#clone-the-code-and-setup-the-directories">Clone the code and setup the directories:</a></li>
          <li><a href="#configure-reposado">Configure Reposado:</a></li>
          <li><a href="#let-margarita-access-reposados-shared-resources">Let Margarita access Reposado’s shared resources:</a></li>
        </ul>
      </li>
      <li><a href="#setting-up-apache">Setting up Apache</a>        <ul>
          <li><a href="#creating-our-very-own-wsgi-script">Creating Our Very Own .wsgi Script</a></li>
          <li><a href="#configuring-apache">Configuring Apache</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also">If you just change the port or add more ports here, you will likely also</a>    <ul>
      <li><a href="#rewrite-rules">Rewrite Rules</a></li>
      <li><a href="#done">Done.</a></li>
    </ul>
  </li>
  <li><a href="#addendum-1-scheduling-reposync">Addendum 1: Scheduling repo_sync</a></li>
  <li><a href="#addendum-2-keeping-up-to-date">Addendum 2: Keeping Up To Date</a></li>
  <li><a href="#addendum-3-securing-margarita">Addendum 3: Securing Margarita</a></li>
  <li><a href="#addendum-4-using-nginx">Addendum 4: Using nginx</a></li>
  <li><a href="#if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also-1">If you just change the port or add more ports here, you will likely also</a></li>
  <li><a href="#listen-80">Listen 80</a></li>
  <li><a href="#credits">Credits</a></li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<h1 id="intro">Intro</h1>
<p>Why on earth are you creating another guide? Why not use Puppet or Docker? Well the short answer is I could not find anything that covered all the criteria that I needed. I might go back later and puppetize this or use docker but needed a working solution. Plus the first step to automating something is to document how to do it manually, so below is the process to get Reposado and Margarita with Authorization (optional) setup on a clean install of Ubuntu 14.04 using Apache. The only pre-requirement is having an administrator account on the Ubuntu box already setup. </p>

<p><em>Note:</em> I have added <a href="./#addendum-4-using-nginx">Addendum 4</a> if you would like to serve files using nginx instead of apache. In my testing, it has been much faster at serving html request. Also, a little easier to setup the redirect rules.</p>

<h1 id="the-software">The software</h1>
<p>If you have not heard of <a href="https://github.com/wdas/reposado">reposado</a>. It is a set of tools that replicate the key functionality of Mac OS X Server’s Software Update Service.</p>

<blockquote>
  <ul>
    <li>It doesn’t need to run on a Mac.</li>
    <li>It can provide updates to any OS X version, whereas Apple’s Mac OS X server can only provide updates (not strictly true, but not easily!) to its current version or below e.g. your OS X 10.6 server can only provide to OS X 10.6 or below – it can’t cater for your OS X 10.7 or OS X 10.8 clients. Reposado doesn’t have this pitfall, it caters for all!<br />
– <a href="http://jerome.co.za/reposado-a-custom-apple-software-update-server/">Jerome</a></li>
  </ul>
</blockquote>

<p>Plus, with reposado you can create multiple releases aka Production and Testing catalogs. </p>

<p><a href="https://github.com/jessepeterson/margarita">Margarita</a> is an add-on to reposado that gives you a web GUI!</p>

<blockquote>
  <p>Margarita is a web interface to reposado the Apple Software Update replication and catalog management tool. While the reposado command line administration tools work great for folks who are comfortable in that environment something a little more accesible might be desired.</p>

  <p>– jessepeterson</p>
</blockquote>

<hr />

<h1 id="the-install">The Install</h1>

<p>As a matter of good practice, we are going to make sure our Ubuntu server is fully patched before we start. Then we will install <em>mod_wsgi, git, apache tools, python setuptools, curl, pip, and apache2</em>. Since Margarita runs on <em>Flask</em>, we will need to install that as well.</p>

<h2 id="installing-required-software">Installing Required Software</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get -y install apache2-utils libapache2-mod-wsgi git python-setuptools python curl python-pip apache2
sudo easy_install flask&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>You can install Reposado and Margarita anywhere you would like, but I am going to use <em>/usr/local/asus</em> (which stands for Apple Software Update Server) just to keep things organized. The following commands will create the reposado, margarita, www and meta directories within <em>/usr/local/asus</em>. The <em>www</em> directory will be the location from which reposado’s catalogs and downloads will be served, and you can think of the <em>meta</em> directory as reposado’s work area. A link to the asus directory will also be created in your home directory for faster access.</p>

<h3 id="clone-the-code-and-setup-the-directories">Clone the code and setup the directories:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo mkdir /usr/local/asus
ln -s /usr/local/asus/ ~/
<span class="nb">cd</span> /usr/local/asus
sudo chown <span class="nv">$USER</span>:<span class="nv">$USER</span> .
git clone https://github.com/wdas/reposado.git
git clone https://github.com/jessepeterson/margarita.git
mkdir www meta&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>You will notice that I had you chown the directory so that you own it. This is not required, but it eliminates a bunch of extra ‘sudo’ calls for the rest of the steps.</p>

<p>Next we will need to configure Reposado and let it sync, and I am going to do so without replication. If you want replication so your clients will download updates from your server instead of Apple’s, you will need to enter your host’s FQDN for the answer to the last prompt, e.g. <a href="">http://su.example.com</a></p>

<h3 id="configure-reposado">Configure Reposado:</h3>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;./reposado/code/repoutil –configure
Filesystem path to store replicated catalogs and updates <span class="o">[</span>None<span class="o">]</span>: /usr/local/asus/www
Filesystem path to store Reposado metadata <span class="o">[</span>None<span class="o">]</span>: /usr/local/asus/meta
Base URL <span class="k">for</span> your <span class="nb">local </span>Software Update Service
<span class="o">(</span>Example: http://su.your.org – leave empty <span class="k">if</span> you are not replicating updates<span class="o">)</span> <span class="o">[</span>None<span class="o">]</span>:&lt;/p&gt;

&lt;p&gt;./reposado/code/repo_sync <span class="c"># This will take a while&lt;/p&gt;</span>

&lt;p&gt;</code></pre></div></p>

<p><em>Note:</em> the repo_sync will download Apple catalogs + updates (if enabled). Grab a coffee, this could be upwards of 170GB.</p>

<p>You now have Reposado fully installed and configured! Now we need to serve those files over http so clients can do something with the downloads.</p>

<p>Lets move on to setting up your Margarita front-end. We will start things off by borrowing from Jesse’s instructions, just to make sure things have been properly installed. Since Margarita and Reposado are both written in Python and share common tasks, it only makes sense that code is reused where possible; that is exactly what Jesse has done. So in order for Margarita to use Reposado’s code, it needs to be able to find it. We will need to create a few symbolic links to do this.</p>

<h3 id="let-margarita-access-reposados-shared-resources">Let Margarita access Reposado’s shared resources:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;ln -s /usr/local/asus/reposado/code/reposadolib margarita/reposadolib
ln -s /usr/local/asus/reposado/code/preferences.plist margarita/preferences.plist&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>At this point, Margarita should be completely installed and configured. To test, run the following command and then point your favorite browser to <a href="">http://example.com:8089</a> (do not worry, port 8089 is just for this test). If all goes well, Margarita should load but without showing any updates. To see the updates, uncheck the “Hide commonly listed updates” button at the top of the page. If you still do not see any updates, you have encountered a problem and should look at the output in your terminal window to start troubleshooting.</p>

<p><strong>Testing Margarita:</strong>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;python margarita/margarita.py&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h2 id="setting-up-apache">Setting up Apache</h2>
<p>So far we have properly configured both Reposado and Margarita. Now all we want to do is make sure the web interface will automatically come back to life when the server is rebooted. We could write a custom service that uses Python to launch the margarita.py script as we have done in the above test, but we already have Apache running to serve the software updates, so why not use that to serve the Margarita web interface as well?</p>

<h3 id="creating-our-very-own-wsgi-script">Creating Our Very Own .wsgi Script</h3>
<p>A .wsgi script gives mod_wsgi the information it needs to launch the python web app, but Margarita does not come with one. Fortunately, these files are pretty easy to make. Using your favorite text editor (<em>cough</em> nano <em>cough</em>), create the file <em>/usr/local/asus/margarita/margarita.wsgi</em> with the following contents:</p>

<p><code>sudo nano /usr/local/asus/margarita/margarita.wsgi</code>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;import sys
<span class="nv">EXTRA_DIR</span> <span class="o">=</span> “/usr/local/asus/margarita”
<span class="k">if</span> EXTRA_DIR not in sys.path:
    sys.path.append<span class="o">(</span>EXTRA_DIR<span class="o">)</span>&lt;/p&gt;

&lt;p&gt;from margarita import app as application&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h3 id="configuring-apache">Configuring Apache</h3>

<p>Before we go about configuring Apache, we need to make sure it has the proper filesystem permissions.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>I have apache sharing the reposado files via port 8088 (the Apple default) and margarita on port 8089 (default). You should be able to copy and paste the following snippets of my apache config files, and see everything working properly.</p>

<p>Enable the mod_rewrite engine:<br />
<code>sudo a2enmod rewrite</code> </p>

<p>Lets initialize apache with the following command:<br />
 <code>sudo service apache2 restart</code></p>

<p>Now we need to add ports 8088 and 8089 to apache’s listening ports.<br />
<code>sudo nano /etc/apache2/ports.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also&quot;</span><span class="nt">&gt;</span>If you just change the port or add more ports here, you will likely also<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span># have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default.conf<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>Listen 80
Listen 8088
Listen 8089<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">ssl_module=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">mod_gnutls</span><span class="err">.</span><span class="na">c=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Once done your files should look like the above.</p>

<p><strong>Now, lets get reposado and margarita configured with apache:</strong></p>

<p><code>sudo nano /etc/apache2/sites-enabled/reposado.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>VirtualHost *:8088<span class="ni">&amp;gt;</span>
    ServerAdmin webmaster@localhost
    DocumentRoot /usr/local/asus/www<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span>Alias /content /usr/local/asus/www/content
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Require all granted
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>

# Logging
ErrorLog ${APACHE_LOG_DIR}/asus-error.log
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/asus-access.log combined
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>/VirtualHost<span class="ni">&amp;gt;</span><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p><code>sudo nano /etc/apache2/sites-enabled/margarita.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>VirtualHost *:8089<span class="ni">&amp;gt;</span>
    ServerAdmin webmaster@localhost
    DocumentRoot /usr/local/asus/www<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span># Base cofiguration
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    Options FollowSymLinks
    AllowOverride None
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>
 
# Margarita
Alias /static /usr/local/asus/margarita/static
WSGIDaemonProcess margarita home=/usr/local/asus/margarita user=www-data group=www-data threads=5
WSGIScriptAlias / /usr/local/asus/margarita/margarita.wsgi
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    WSGIProcessGroup margarita
    WSGIApplicationGroup %{GLOBAL}
    Require all granted
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>
 
# Logging
ErrorLog ${APACHE_LOG_DIR}/asus-error.log
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/asus-access.log combined
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>/VirtualHost<span class="ni">&amp;gt;</span><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<h3 id="rewrite-rules">Rewrite Rules</h3>

<p>To allow Apple Clients to use pretty configuration URLs like <a href="">http://su.example.com:8088</a> lets enable Rewrite Rules for the www directory.</p>

<p><code>nano /usr/local/asus/www/.htaccess</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>RewriteEngine On
Options FollowSymLinks
RewriteBase  /
RewriteCond %{HTTP_USER_AGENT} Darwin/8
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/index$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/9
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/10
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/others/index-leopard-snowleopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/11
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/12
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/others/index-mountainlion-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/13
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-10.9-mountainlion-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/14
RewriteRule ^index(.*).sucatalog$ content/catalogs/others/index-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog [L]<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Now we need to make sure the web service has permissions to the file we will re-run the following commands.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus</code></pre></div></p>

<p>Lastly, restart apache for the changes to take place.<br />
<code>sudo service apache2 restart</code></p>

<h2 id="done">Done.</h2>
<p>Well, that is the plan anyway. If you are still having trouble getting things working, here are a few resources to get you started down the troubleshooting path:</p>

<ul>
  <li><a href="">https://github.com/jessepeterson/margarita</a></li>
  <li><a href="">http://groups.google.com/group/reposado</a></li>
  <li><a href="">https://github.com/wdas/reposado/wiki/_pages</a></li>
  <li><a href="">http://flask.pocoo.org/docs/deploying/mod_wsgi/</a></li>
</ul>

<hr />

<h1 id="addendum-1-scheduling-reposync">Addendum 1: Scheduling repo_sync</h1>
<p>Out of the box, reposado will not run the repo_sync command without your direct invocation. If you want your new SUS server to look for any new updates released by Apple on its own, leaving you to simply approve them, you can setup a simple cron job. Since it is probably sane for most environments to simply run this script once per day, fire up a sudo nano session and…</p>

<p><code>sudo nano /etc/cron.daily/repo_sync</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
/usr/local/asus/reposado/code/repo_sync
/bin/chgrp -R www-data /usr/local/asus/www
/bin/chmod -R g+rX /usr/local/asus/www</code></pre></div></p>

<p>…and of course, make sure the script is executable with</p>

<p><code>sudo chmod +x /etc/cron.daily/repo_sync</code></p>

<p>For more information on creating a cron job <a href="https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps">click here</a>.  </p>

<h1 id="addendum-2-keeping-up-to-date">Addendum 2: Keeping Up To Date</h1>

<p>Every once in a while, Apple will throw a curveball at Reposado which requires a code modification. When that happens, you can easily upgrade both Reposado and Margarita via the git command.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /usr/local/asus/reposado
git pull
<span class="nb">cd</span> /usr/local/asus/margarita
git pull
sudo apachectl restart</code></pre></div></p>

<h1 id="addendum-3-securing-margarita">Addendum 3: Securing Margarita</h1>

<p>Margarita by default is open to everyone. To secure the site using basic http authentication make the following changes.</p>

<p>First, lets create a basic authentication user with the following.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">htpasswd -c /usr/local/asus/users admin
<span class="c"># The following is output.enter a secure password!</span>
New password: &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**
Re-type new password: **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
Adding password <span class="k">for</span> user admin</code></pre></div></p>

<p>For security reasons make it so root is the only user that can edit the file.
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chown root.nogroup /usr/local/asus/users 
sudo chmod <span class="m">640</span> /usr/local/asus/users</code></pre></div></p>

<p>Now modify the apache configuration file for Margarita. Add the following “Authentication” section in-between the “Margarita” and “logging” sections.<br />
<code>sudo nano /etc/apache2/sites-enabled/margarita.conf</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   <span class="p">&amp;</span>lt<span class="p">;</span>---Require all granted
<span class="p">&amp;</span>lt<span class="p">;</span>/Directory<span class="p">&amp;</span>gt<span class="p">;</span>

<span class="c"># Authentication    </span>
<span class="p">&amp;</span>lt<span class="p">;</span>Location /<span class="p">&amp;</span>gt<span class="p">;</span>
  AuthType Basic
  AuthName <span class="s2">&quot;Authentication Required&quot;</span>
  AuthUserFile <span class="s2">&quot;/usr/local/asus/users&quot;</span>
  Require valid-user
<span class="p">&amp;</span>lt<span class="p">;</span>/Location<span class="p">&amp;</span>gt<span class="p">;</span>

<span class="c"># Logging</span>
    ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/asus-error.log
    LogLevel warn ---<span class="p">&amp;</span>gt<span class="p">;</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></div></p>

<p>Modify permissions, one last time.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus</code></pre></div></p>

<p>Lastly, restart apache for the changes to take place.<br />
<code>sudo service apache2 restart</code></p>

<h1 id="addendum-4-using-nginx">Addendum 4: Using nginx</h1>

<p>Nginx offers a few benefits over using apache, with the key benefit being lighter. This results in faster transfers from the web server to clients. With that said, Nginx does not offer as wide of a selection of modules as Apache. For that reason, I am currently running Margarita over apache while serving reposado (Apple client updates) via nginx. </p>

<p><em>Note:</em> This section should be used in replace of using the <code>/etc/apache2/sites-enabled/reposado.conf</code> file not in addition. Bad things will happen if you try to share the reposado downloaded updates via both apache and nginx.</p>

<p>Firstly, we must install nginx on our server so we can use it.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo apt-get -y install nginx</code></pre></div></p>

<p>Now we need to modify our apache ports file so nginx has access our desired ports. You can pick the port yourself just make sure and be consistent when you modify your <code>reposado.conf</code> file. Remove both port 80 &amp; 8088 from the file below.<br />
<code>sudo nano /etc/apache2/ports.conf</code>  </p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also-1&quot;</span><span class="nt">&gt;</span>If you just change the port or add more ports here, you will likely also<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span># have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default.conf<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;listen-80&quot;</span><span class="nt">&gt;</span>Listen 80<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span>#Listen 8088
Listen 8089<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">ssl_module=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">mod_gnutls</span><span class="err">.</span><span class="na">c=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Restart apache to free ports 80 and 8088 for nginx. <br />
<code>sudo service apache2 restart</code> </p>

<p>We need to setup nginx with the following config file. Modify your listening port to your preference.  </p>

<p><code>sudo nano /etc/nginx/sites-enabled/reposado.conf</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">server <span class="o">{</span>
  listen 8088<span class="p">;</span>
  server_name reposado01<span class="p">;</span>
  root /usr/local/asus/www<span class="p">;</span>
  autoindex off<span class="p">;</span>
  <span class="c">## 10.4.x - Tiger</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/8” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/index<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.5.x - Leopard</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/9” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;/em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-leopard.merged-1<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.6.x - Snow Leopard</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/10” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-leopard-snowleopard.merged-1<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.7.x - Lion</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/11” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;/em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-lion-snowleopard-leopard.merged-1<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.8.x - Mountain Lion</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/12” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-mountainlion-lion-snowleopard-leopard.merged-1<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.9.x - Mavericks</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/13” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.&lt;/em&gt;<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-10.9-mountainlion-lion-snowleopard-leopard.merged-1<span class="nv">$1</span>.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
  <span class="c">## 10.10.x - Yosemite</span>
  <span class="k">if</span> <span class="o">(</span> <span class="nv">$http_user_agent</span> ~ “Darwin/14” <span class="o">){</span>
    rewrite ^/index<span class="o">(</span>.*<span class="o">)</span>.sucatalog<span class="nv">$ </span>/content/catalogs/others/index-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog last<span class="p">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Lastly, start the nginx service to start serving your files.<br />
<code>sudo /etc/init.d/nginx start</code></p>

<hr />

<h1 id="credits">Credits</h1>
<p>Need to truly thank both Joe Wollard &amp; Jerome for their excellent documentation. This page is strongly based off of their work. </p>

<hr />

<p>Articles:<br />
<a href="http://www.webreference.com/programming/apache_authentication/index.html">Apache authentication</a>,<br />
<a href="http://www.iotopia.com/configure-reposado-on-an-ubuntu-oneric-server-so-deploy-studio-can-use-it/">Configure reposado with Rewrite Rules</a>,<br />
<a href="https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps">Creating a Cron task</a>,<br />
<a href="http://jerome.co.za/reposado-a-custom-apple-software-update-server/">Reposado - Apple Software Update Server</a>,<br />
<a href="http://denisonmac.wordpress.com/2013/02/28/running-margarita-in-apache/">Running Margarita in apache</a>,  </p>

<p>Updated:<br />
Oct 4, 2014 - Updated <a href="./#addendum-1-scheduling-reposync">scheduling reposync</a> to work. Reduce vhost lines for reposado.conf (now disables directory listing).<br />
Oct. 12, 2014 - Spelling<br />
Oct. 13, 2014 - Added <a href="./#addendum-4-using-nginx">Nginx setup addendum</a><br />
Oct. 17, 2014 - Type and updated wording on <a href="./#addendum-4-using-nginx">Nginx setup addendum</a> section  </p>

]]></content>
  </entry>
  
</feed>
    </div><!-- /.article-wrap -->
    
  </article>
</div><!-- /#index -->

<div class="footer-wrap">
  <footer>
    <div class="google-ads">
  <!-- 320 x 50 ad -->
  <script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
       style="display:inline-block;width:320px;height:50px"
       data-ad-client=""
       data-ad-slot=""></ins>
  <script>
  (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div><!-- /.google-ads -->

<span>&copy; 2014 Clayton Burlison. Powered by <a href="http://jekyllrb.com">Jekyll</a> using the <a href="http://mademistakes.com/minimal-mistakes/">Minimal Mistakes</a> theme.</span>
  </footer>
</div><!-- /.footer-wrap -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="https://clburlison.com/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="https://clburlison.com/assets/js/scripts.min.js"></script>

          

</body>
</html>