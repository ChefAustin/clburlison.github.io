<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Category: ubuntu &#8211; Just another tech blog</title>

<meta name="keywords" content="">



<!-- Twitter Cards -->
<meta name="twitter:title" content="Category: ubuntu">

<meta name="twitter:site" content="@clburlison">
<meta name="twitter:creator" content="@clburlison">

<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="http://clburlison.com/images/">

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Category: ubuntu">

<meta property="og:url" content="http://clburlison.com/blog/categories/ubuntu/atom.xml">
<meta property="og:site_name" content="Just another tech blog">





<link rel="canonical" href="http://clburlison.com/blog/categories/ubuntu/atom.xml">
<link href="http://clburlison.com/feed.xml" type="application/atom+xml" rel="alternate" title="Just another tech blog Feed">


<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="http://clburlison.com/assets/css/main.css">

<meta http-equiv="cleartype" content="on">

<!-- HTML5 Shiv and Media Query Support -->
<!--[if lt IE 9]>
	<script src="http://clburlison.com/assets/js/vendor/html5shiv.min.js"></script>
	<script src="http://clburlison.com/assets/js/vendor/respond.min.js"></script>
<![endif]-->

<!-- Modernizr -->
<script src="http://clburlison.com/assets/js/vendor/modernizr-2.7.1.custom.min.js"></script>

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="http://clburlison.com/favicon.ico">
<!-- 32x32 -->
<link rel="shortcut icon" href="http://clburlison.com/favicon.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="http://clburlison.com/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="http://clburlison.com/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="http://clburlison.com/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://clburlison.com/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body class="page">

<!--[if lt IE 9]><div class="browser-upgrade alert alert-info">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</div><![endif]-->

<div class="navigation-wrapper">
	<div class="site-name">
		<a href="http://clburlison.com">Just another tech blog</a>
	</div><!-- /.site-name -->
	<div class="top-navigation">
		<nav role="navigation" id="site-nav" class="nav">
		    <ul>
		        
					    
					        
					    
					    <li><a href="http://clburlison.com/about/" >About</a></li>
					  
					    
					        
					    
					    <li><a href="http://clburlison.com/resources/" >Resources</a></li>
					  
					    
					        
					    
					    <li><a href="http://clburlison.com/blog/archives/" >Archives</a></li>
					  
		    </ul>
		</nav>
	</div><!-- /.top-navigation -->
</div><!-- /.navigation-wrapper -->



<div id="main" role="main">
  <div class="article-author-side">
    



	<img src="http://clburlison.com/images/me.jpg" class="bio-photo" alt="Clayton Burlison bio photo"></a>

<h3>Clayton Burlison</h3>
<p>A Mac sysadmin, documenting useful code, ideas, & guides.</p>
<a href="mailto:clburlison@gmail.com" class="author-social" target="_blank"><i class="fa fa-envelope-square"></i> Email</a>
<a href="http://twitter.com/clburlison" class="author-social" target="_blank"><i class="fa fa-twitter-square"></i> Twitter</a>
<a href="http://facebook.com/clburlison" class="author-social" target="_blank"><i class="fa fa-facebook-square"></i> Facebook</a>

<a href="http://linkedin.com/in/clburlison" class="author-social" target="_blank"><i class="fa fa-linkedin-square"></i> LinkedIn</a>


<a href="http://github.com/clburlison" class="author-social" target="_blank"><i class="fa fa-github"></i> Github</a>






  </div>
  <article>
    <h1>Category: ubuntu</h1>
    <div class="article-wrap">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Just another tech blog]]></title>
  <link href="http://clburlison.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://clburlison.com/"/>
  <updated>2014-10-04T10:26:40-05:00</updated>
  <id>http://clburlison.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Reposado + Margarita on Ubuntu 14.04]]></title>
    <link href="http://clburlison.com/blog/2014/10/02/reposado-guide/"/>
    <updated>2014-10-02T22:55:49-05:00</updated>
    <id>http://clburlison.com/blog/2014/10/02/reposado-guide</id>
    <content type="html"><![CDATA[<section id="table-of-contents" class="toc">
  <header>
    <h3>Overview</h3>
  </header>
<div id="drawer">
<ul id="markdown-toc">
  <li><a href="#intro">Intro</a></li>
  <li><a href="#the-software">The software</a></li>
  <li><a href="#the-install">The Install</a>    <ul>
      <li><a href="#installing-required-software">Installing Required Software</a>        <ul>
          <li><a href="#clone-the-code-and-setup-the-directories">Clone the code and setup the directories:</a></li>
          <li><a href="#configure-reposado">Configure Reposado:</a></li>
          <li><a href="#let-margarita-access-reposados-shared-resources">Let Margarita access Reposado’s shared resources:</a></li>
        </ul>
      </li>
      <li><a href="#setting-up-apache">Setting up Apache</a>        <ul>
          <li><a href="#creating-our-very-own-wsgi-script">Creating Our Very Own .wsgi Script</a></li>
          <li><a href="#configuring-apache">Configuring Apache</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also">If you just change the port or add more ports here, you will likely also</a>    <ul>
      <li><a href="#rewrite-rules">Rewrite Rules</a></li>
      <li><a href="#done">Done.</a></li>
    </ul>
  </li>
  <li><a href="#addendum-1-scheduling-reposync">Addendum 1: Scheduling repo_sync</a></li>
  <li><a href="#addendum-2-keeping-up-to-date">Addendum 2: Keeping Up To Date</a></li>
  <li><a href="#addendum-3-securing-margarita">Addendum 3: Securing Margarita</a></li>
  <li><a href="#credits">Credits</a></li>
</ul>

  </div>
</section>
<!-- /#table-of-contents -->

<h1 id="intro">Intro</h1>
<p>Why on earth are you creating another guide? Why not use Puppet or Docker? Well the short answer is I could not find anything that covered all the criteria that I needed. I might go back later and puppetize this or use docker but needed a working solution. Plus the first step to automating something is to document how to do it manually, so below is the process to get Reposado and Margarita with Authorization (optional) setup on a clean install of Ubuntu 14.04 using Apache. The only pre-requirement is having an administrator account on the Ubuntu box already setup.</p>

<h1 id="the-software">The software</h1>
<p>If you have not heard of <a href="https://github.com/wdas/reposado">reposado</a>. It is a set of tools that replicate the key functionality of Mac OS X Server’s Software Update Service.</p>

<blockquote>
  <ul>
    <li>It doesn’t need to run on a Mac.</li>
    <li>It can provide updates to any OS X version, whereas Apple’s Mac OS X server can only provide updates (not strictly true, but not easily!) to its current version or below e.g. your OS X 10.6 server can only provide to OS X 10.6 or below – it can’t cater for your OS X 10.7 or OS X 10.8 clients. Reposado doesn’t have this pitfall, it caters for all!<br />
– <a href="http://jerome.co.za/reposado-a-custom-apple-software-update-server/">Jerome</a></li>
  </ul>
</blockquote>

<p>Plus, with reposado you can create multiple releases aka Production and Testing catalogs. </p>

<p><a href="https://github.com/jessepeterson/margarita">Margarita</a> is an add-on to reposado that gives you a web GUI!</p>

<blockquote>
  <p>Margarita is a web interface to reposado the Apple Software Update replication and catalog management tool. While the reposado command line administration tools work great for folks who are comfortable in that environment something a little more accesible might be desired.</p>

  <p>– jessepeterson</p>
</blockquote>

<hr />

<h1 id="the-install">The Install</h1>

<p>As a matter of good practice, we are going to make sure our Ubuntu server is fully patched before we start. Then we will install <em>mod_wsgi, git, apache tools, python setuptools, curl, pip, and apache2</em>. Since Margarita runs on <em>Flask</em>, we will need to install that as well.</p>

<h2 id="installing-required-software">Installing Required Software</h2>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get -y install apache2-utils libapache2-mod-wsgi git python-setuptools python curl python-pip apache2
sudo easy_install flask&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>You can install Reposado and Margarita anywhere you would like, but I am going to use <em>/usr/local/asus</em> (which stands for Apple Software Update Server) just to keep things organized. The following commands will create the reposado, margarita, www and meta directories within <em>/usr/local/asus</em>. The <em>www</em> directory will be the location from which reposado’s catalogs and downloads will be served, and you can think of the <em>meta</em> directory as reposado’s work area. A link to the asus directory will also be created in your home directory for faster access.</p>

<h3 id="clone-the-code-and-setup-the-directories">Clone the code and setup the directories:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo mkdir /usr/local/asus
ln -s /usr/local/asus/ ~/
<span class="nb">cd</span> /usr/local/asus
sudo chown <span class="nv">$USER</span>:<span class="nv">$USER</span> .
git clone https://github.com/wdas/reposado.git
git clone https://github.com/jessepeterson/margarita.git
mkdir www meta&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>You will notice that I had you chown the directory so that you own it. This is not required, but it eliminates a bunch of extra ‘sudo’ calls for the rest of the steps.</p>

<p>Next we will need to configure Reposado and let it sync, and I am going to do so without replication. If you want replication so your clients will download updates from your server instead of Apple’s, you will need to enter your host’s FQDN for the answer to the last prompt, e.g. <a href="">http://su.example.com</a></p>

<h3 id="configure-reposado">Configure Reposado:</h3>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;./reposado/code/repoutil –configure
Filesystem path to store replicated catalogs and updates <span class="o">[</span>None<span class="o">]</span>: /usr/local/asus/www
Filesystem path to store Reposado metadata <span class="o">[</span>None<span class="o">]</span>: /usr/local/asus/meta
Base URL <span class="k">for</span> your <span class="nb">local </span>Software Update Service
<span class="o">(</span>Example: http://su.your.org – leave empty <span class="k">if</span> you are not replicating updates<span class="o">)</span> <span class="o">[</span>None<span class="o">]</span>:&lt;/p&gt;

&lt;p&gt;./reposado/code/repo_sync <span class="c"># This will take a while&lt;/p&gt;</span>

&lt;p&gt;</code></pre></div></p>

<p><em>Note:</em> the repo_sync will download Apple catalogs + updates (if enabled). Grab a coffee, this could be upwards of 170GB.</p>

<p>You now have Reposado fully installed and configured! Now we need to serve those files over http so clients can do something with the downloads.</p>

<p>Lets move on to setting up your Margarita front-end. We will start things off by borrowing from Jesse’s instructions, just to make sure things have been properly installed. Since Margarita and Reposado are both written in Python and share common tasks, it only makes sense that code is reused where possible; that is exactly what Jesse has done. So in order for Margarita to use Reposado’s code, it needs to be able to find it. We will need to create a few symbolic links to do this.</p>

<h3 id="let-margarita-access-reposados-shared-resources">Let Margarita access Reposado’s shared resources:</h3>
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;ln -s /usr/local/asus/reposado/code/reposadolib margarita/reposadolib
ln -s /usr/local/asus/reposado/code/preferences.plist margarita/preferences.plist&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>At this point, Margarita should be completely installed and configured. To test, run the following command and then point your favorite browser to <a href="">http://example.com:8089</a> (do not worry, port 8089 is just for this test). If all goes well, Margarita should load but without showing any updates. To see the updates, uncheck the “Hide commonly listed updates” button at the top of the page. If you still do not see any updates, you have encountered a problem and should look at the output in your terminal window to start troubleshooting.</p>

<p><strong>Testing Margarita:</strong>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;python margarita/margarita.py&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h2 id="setting-up-apache">Setting up Apache</h2>
<p>So far we have properly configured both Reposado and Margarita. Now all we want to do is make sure the web interface will automatically come back to life when the server is rebooted. We could write a custom service that uses Python to launch the margarita.py script as we have done in the above test, but we already have Apache running to serve the software updates, so why not use that to serve the Margarita web interface as well?</p>

<h3 id="creating-our-very-own-wsgi-script">Creating Our Very Own .wsgi Script</h3>
<p>A .wsgi script gives mod_wsgi the information it needs to launch the python web app, but Margarita does not come with one. Fortunately, these files are pretty easy to make. Using your favorite text editor (<em>cough</em> nano <em>cough</em>), create the file <em>/usr/local/asus/margarita/margarita.wsgi</em> with the following contents:</p>

<p><code>sudo nano /usr/local/asus/margarita/margarita.wsgi</code>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;import sys
<span class="nv">EXTRA_DIR</span> <span class="o">=</span> “/usr/local/asus/margarita”
<span class="k">if</span> EXTRA_DIR not in sys.path:
    sys.path.append<span class="o">(</span>EXTRA_DIR<span class="o">)</span>&lt;/p&gt;

&lt;p&gt;from margarita import app as application&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<h3 id="configuring-apache">Configuring Apache</h3>

<p>Before we go about configuring Apache, we need to make sure it has the proper filesystem permissions.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;p&gt;sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>I have apache sharing the reposado files via port 8088 (the Apple default) and margarita on port 8089 (default). You should be able to copy and paste the following snippets of my apache config files, and see everything working properly.</p>

<p>Enable the mod_rewrite engine:<br />
<code>sudo a2enmod rewrite</code> </p>

<p>Lets initalize apache with the following command:<br />
 <code>sudo service apache2 restart</code></p>

<p>Now we need to add ports 8088 and 8089 to apache’s listening ports.<br />
<code>sudo nano /etc/apache2/ports.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;if-you-just-change-the-port-or-add-more-ports-here-you-will-likely-also&quot;</span><span class="nt">&gt;</span>If you just change the port or add more ports here, you will likely also<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p&gt;</span># have to change the VirtualHost statement in
# /etc/apache2/sites-enabled/000-default.conf<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>Listen 80
Listen 8088
Listen 8089<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">ssl_module=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;ifmodule</span> <span class="na">mod_gnutls</span><span class="err">.</span><span class="na">c=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
        Listen 443
<span class="nt">&lt;/ifmodule&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Once done your files should look like the above.</p>

<p><strong>Now, lets get reposado and margarita configured with apache:</strong></p>

<p><code>sudo nano /etc/apache2/sites-enabled/reposado.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>VirtualHost *:8088<span class="ni">&amp;gt;</span>
    ServerAdmin webmaster@localhost
    DocumentRoot /usr/local/asus/www<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span>Alias /content /usr/local/asus/www/content
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Require all granted
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>

# Logging
ErrorLog ${APACHE_LOG_DIR}/asus-error.log
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/asus-access.log combined
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>/VirtualHost<span class="ni">&amp;gt;</span><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p><code>sudo nano /etc/apache2/sites-enabled/margarita.conf</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>VirtualHost *:8089<span class="ni">&amp;gt;</span>
    ServerAdmin webmaster@localhost
    DocumentRoot /usr/local/asus/www<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;pre&gt;&lt;code&gt;</span># Base cofiguration
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    Options FollowSymLinks
    AllowOverride None
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>
 
# Margarita
Alias /static /usr/local/asus/margarita/static
WSGIDaemonProcess margarita home=/usr/local/asus/margarita user=www-data group=www-data threads=5
WSGIScriptAlias / /usr/local/asus/margarita/margarita.wsgi
<span class="ni">&amp;lt;</span>Directory /<span class="ni">&amp;gt;</span>
    WSGIProcessGroup margarita
    WSGIApplicationGroup %{GLOBAL}
    Require all granted
<span class="ni">&amp;lt;</span>/Directory<span class="ni">&amp;gt;</span>
 
# Logging
ErrorLog ${APACHE_LOG_DIR}/asus-error.log
LogLevel warn
CustomLog ${APACHE_LOG_DIR}/asus-access.log combined
<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
<span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>/VirtualHost<span class="ni">&amp;gt;</span><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<h3 id="rewrite-rules">Rewrite Rules</h3>

<p>To make allow Apple Clients to use pretty configuration URLs like <a href="">http://su.example.com:8088</a> lets enable Rewrite Rules for the www directory.</p>

<p><code>nano /usr/local/asus/www/.htaccess</code></p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>RewriteEngine On
Options FollowSymLinks
RewriteBase  /
RewriteCond %{HTTP_USER_AGENT} Darwin/8
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/index$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/9
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/10
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/others/index-leopard-snowleopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/11
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/12
RewriteRule ^index(.<span class="nt">&lt;em&gt;</span>).sucatalog$ content/catalogs/others/index-mountainlion-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/13
RewriteRule ^index(.<span class="nt">&lt;/em&gt;</span>).sucatalog$ content/catalogs/others/index-10.9-mountainlion-lion-snowleopard-leopard.merged-1$1.sucatalog [L]
RewriteCond %{HTTP_USER_AGENT} Darwin/14
RewriteRule ^index(.*).sucatalog$ content/catalogs/others/index-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog [L]<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Now we need to make sure the web service has permissions to the file we will re-run the following commands.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus</code></pre></div></p>

<p>Lastly, restart apache for the changes to take place.<br />
<code>sudo service apache2 restart</code></p>

<h2 id="done">Done.</h2>
<p>Well, that is the plan anyway. If you are still having trouble getting things working, here are a few resources to get you started down the troubleshooting path:</p>

<ul>
  <li><a href="">https://github.com/jessepeterson/margarita</a></li>
  <li><a href="">http://groups.google.com/group/reposado</a></li>
  <li><a href="">https://github.com/wdas/reposado/wiki/_pages</a></li>
  <li><a href="">http://flask.pocoo.org/docs/deploying/mod_wsgi/</a></li>
</ul>

<hr />

<h1 id="addendum-1-scheduling-reposync">Addendum 1: Scheduling repo_sync</h1>
<p>Out of the box, reposado will not run the repo_sync command without your direct invocation. If you want your new SUS server to look for any new updates released by Apple on its own, leaving you to simply approve them, you can setup a simple cron job. Since it is probably sane for most environments to simply run this script once per day, fire up a sudo nano session and…</p>

<p><code>sudo nano /etc/cron.daily/repo_sync</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
/usr/local/asus/reposado/code/repo_sync
/bin/chgrp -R www-data /usr/local/asus/www
/bin/chmod -R g+rX /usr/local/asus/www</code></pre></div></p>

<p>…and of course, make sure the script is executable with</p>

<p><code>sudo chmod +x /etc/cron.daily/repo_sync</code></p>

<p>For more information on creating a cron job <a href="https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps">click here</a>.  </p>

<h1 id="addendum-2-keeping-up-to-date">Addendum 2: Keeping Up To Date</h1>

<p>Every once in a while, Apple will throw a curveball at Reposado which requires a code modification. When that happens, you can easily upgrade both Reposado and Margarita via the git command.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /usr/local/asus/reposado
git pull
<span class="nb">cd</span> /usr/local/asus/margarita
git pull
sudo apachectl restart</code></pre></div></p>

<h1 id="addendum-3-securing-margarita">Addendum 3: Securing Margarita</h1>

<p>Margarita by default is open to everyone. To secure the site using basic http authentication make the following changes.</p>

<p>First, lets create a basic authentication user with the following.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">htpasswd -c /usr/local/asus/users admin
<span class="c"># The following is output.enter a secure password!</span>
New password: &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**
Re-type new password: **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
Adding password <span class="k">for</span> user admin</code></pre></div></p>

<p>For security reasons make it so root is the only user that can edit the file.
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chown root.nogroup /usr/local/asus/users 
sudo chmod <span class="m">640</span> /usr/local/asus/users</code></pre></div></p>

<p>Now modify the apache configuration file for Margarita. Add the following “Authentication” section in-between the “Margarita” and “logging” sections.<br />
<code>sudo nano /etc/apache2/sites-enabled/margarita.conf</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   <span class="p">&amp;</span>lt<span class="p">;</span>---Require all granted
<span class="p">&amp;</span>lt<span class="p">;</span>/Directory<span class="p">&amp;</span>gt<span class="p">;</span>

<span class="c"># Authentication    </span>
<span class="p">&amp;</span>lt<span class="p">;</span>Location /<span class="p">&amp;</span>gt<span class="p">;</span>
  AuthType Basic
  AuthName <span class="s2">&quot;Authentication Required&quot;</span>
  AuthUserFile <span class="s2">&quot;/usr/local/asus/users&quot;</span>
  Require valid-user
<span class="p">&amp;</span>lt<span class="p">;</span>/Location<span class="p">&amp;</span>gt<span class="p">;</span>

<span class="c"># Logging</span>
    ErrorLog <span class="k">${</span><span class="nv">APACHE_LOG_DIR</span><span class="k">}</span>/asus-error.log
    LogLevel warn ---<span class="p">&amp;</span>gt<span class="p">;</span>
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></div></p>

<p>Modify permissions, one last time.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo chgrp -R www-data /usr/local/asus
sudo chmod -R g+r /usr/local/asus</code></pre></div></p>

<p>Lastly, restart apache for the changes to take place.<br />
<code>sudo service apache2 restart</code></p>

<hr />

<h1 id="credits">Credits</h1>
<p>Need to truly thank both Joe Wollard &amp; Jerome for their excellent documentation. This page is strongly based off of their work. </p>

<hr />

<p>Articles:<br />
<a href="http://www.webreference.com/programming/apache_authentication/index.html">Apache authentication</a>,<br />
<a href="http://www.iotopia.com/configure-reposado-on-an-ubuntu-oneric-server-so-deploy-studio-can-use-it/">Configure reposado with Rewrite Rules</a>,<br />
<a href="https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps">Creating a Cron task</a>,<br />
<a href="http://jerome.co.za/reposado-a-custom-apple-software-update-server/">Reposado - Apple Software Update Server</a>,<br />
<a href="http://denisonmac.wordpress.com/2013/02/28/running-margarita-in-apache/">Running Margarita in apache</a>,  </p>

<p>Updated: Oct 4, 2014 - Updated <a href="./#addendum-1-scheduling-reposync">scheduling reposync</a> to work. Reduce vhost lines for reposado.conf (now disables directory listing).</p>
]]></content>
  </entry>
  
</feed>
    </div><!-- /.article-wrap -->
    
  </article>
</div><!-- /#index -->

<div class="footer-wrap">
  <footer>
    <div class="google-ads">
  <!-- 320 x 50 ad -->
  <script async src="http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <ins class="adsbygoogle"
       style="display:inline-block;width:320px;height:50px"
       data-ad-client=""
       data-ad-slot=""></ins>
  <script>
  (adsbygoogle = window.adsbygoogle || []).push({});
  </script>
</div><!-- /.google-ads -->

<span>&copy; 2014 Clayton Burlison. Powered by <a href="http://jekyllrb.com">Jekyll</a> using the <a href="http://mademistakes.com/minimal-mistakes/">Minimal Mistakes</a> theme.</span>

<script src="//static.getclicky.com/js" type="text/javascript"></script>
<script type="text/javascript">try{ clicky.init(100737449); }catch(e){}</script>
  </footer>
</div><!-- /.footer-wrap -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="http://clburlison.com/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="http://clburlison.com/assets/js/scripts.min.js"></script>

          

</body>
</html>